NO3_limits = c(0,15)
NO3_label <- expression (paste("NO3 ", mu, "M." ,L^-1))
ge_plot <- filter (ge_nutrients, depth_m %in% c(1.5, 5, 10, 20, 40, 60))
for (one_year in c(2016)) {
if (one_year == 2015) {xmin=as.Date("2015-04-01"); xmax=as.Date("2015-07-20")}
else {xmin=as.Date("2016-04-01"); xmax=as.Date("2016-07-20")}
plot1<-ggplot(ge_plot,
aes(x=date, y=NO3_GFF, shape=depth_m_char, linetype=depth_m_char, color=depth_m_char)) +
geom_line (size=0.8) + geom_point(size = 4)  +
theme_bw(scaling_factor) +
theme(panel.border = element_rect(colour = "black"),
axis.line = element_line(colour = "black") ,
legend.title=element_text(size=scaling_factor),
legend.key=element_blank(),
axis.title = element_text(size=scaling_factor),
legend.text=element_text(size=scaling_factor),
legend.key.height = unit(1, "cm"),
axis.text = element_text(size=0.8*scaling_factor),
panel.background = element_rect(fill="white"),
legend.position = "top",
legend.box = "horizontal"
) +
labs(x = "Date", y = NO3_label, title = one_year ) +
scale_x_date(limits=c(xmin,xmax), date_breaks = "1 month", date_minor_breaks = "1 week", date_labels =  "%d/%m") +
scale_y_continuous(minor_breaks=waiver(), limits=NO3_limits) +
scale_color_manual(values=depth_color) +
scale_shape_manual(values=depth_shape) +
scale_linetype_manual(values=depth_linetype)
print(plot1)
}
ggplot(ge_plot, aes(x=NO3_GFF, y=Si_GFF)) +
geom_point()  +
geom_smooth(method="lm",show.legend = TRUE)
lm = lm(NO3_GFF ~ Si_GFF, data=ge_plot)
coeffs = coefficients(lm); coeffs
attach(ge_fcm_ic)
avgbyyear = aggregate(Nano_mL ~ julian_day + year, data=ge_fcm_ic, weighted.mean)
df3 <- data.frame(sapply(avgbyyear, function(x) as.numeric(as.character(x))))
sapply(df3, class)
avgnano2015 = as.matrix(df3[3])[1:43]
avgnano2016 = as.matrix(df3[3])[44:76]
avgbyyearpico = aggregate(Pico_mL ~ julian_day + year, data=ge_fcm_ic, weighted.mean)
df4 <- data.frame(sapply(avgbyyearpico, function(x) as.numeric(as.character(x))))
sapply(df4, class)
avgpico2015 = as.matrix(df4[3])[1:43]
avgpico2016 = as.matrix(df4[3])[44:76]
avgphyto2015 <- (avgnano2015 + avgpico2015)/2
avgphyto2016 <- (avgnano2016 + avgpico2016)/2
par(mar = c(5,5,2,5))
with(df3, plot(df3$julian_day[44:76], avgphyto2016, type="l", col="purple",lwd = 3, xlab = 'Julian Day', xlim=c(90, 210), ylab= 'Average Phyto Cell (mL)', ylim=c(0,19000)))
par(new = T)
with(avg_data, plot(avg_data$julian_day,avg_data$NO3_GFF, type = "l", col="red",lwd = 3, axes=F, xlab=NA, ylab=NA, cex=1.2))
axis(side = 4)
mtext(side = 4, line = 3, 'Average Nitrate Level (μmL)')
legend(x=130, y =7.3,
legend=c("Phytoplankton Abundance", "Nitrate Level"),
lty=c(1,1), lwd = 3, col=c("purple", "red"))
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("cowplot")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
library("stringr")
depth_sampled <-  c(1.5, 5, 10, 20, 30, 40, 60)
depth_color<-c("1.5"="#c6dbef","5"="#9ecae1", "10"="#6baed6", "20"="#4292c6",  "30"="#2171b5", "40"="#08519c", "60"="#08306b")
depth_linetype<-c("1.5"=1,"5"=1, "10"=1, "20"=2, "30"=2, "40"=2, "60"=2)
depth_shape <-c("1.5"=15,"5"=15, "10"=16, "20"=16, "30"= 17, "40"=17, "60"=18)
scaling_factor=15
cell_label <- expression (paste("cell.",mL^-1))
pico_label <- expression (paste("Pico cell.",mL^-1))
nano_label <- expression (paste("Nano cell.",mL^-1))
cell_breaks=c(10, 100,1000,10000,100000)
cell_limits_phyto = c(10, 100000)
cell_limits_nano = c(10, 10000)
cell_limits_bact = c(100000, 1500000)
julian_day_limits = c(90, 200)
depth_min=0; depth_max=100
ge_fcm <- read_excel("../metadata/GE_all_Cytometry version 1.5.xlsx",sheet = "All data") %>%
mutate(depth_m_char = as.character(depth_m),
date=as_date(date))
#Taking the Ice Camp data only
ge_fcm_ic <- filter (ge_fcm, (operation=="Ice camp")
& (sample_type=="water")
& (depth_level != "underice")
& !(depth_m %in% c(0,8,14,18,65,100,200,350)))
#print(summarytools::descr(ge_fcm_ic, stats = c("n.valid", "mean", "sd", "min", "max"), transpose = TRUE,
#omit.headings = TRUE, style = "rmarkdown"), method="render")
ge_fcm_ic_pico <- ge_fcm_ic %>%
filter(!is.na(Pico_mL) & (year==2016) ) %>%
mutate(day_julian = yday(date))
#print(summarytools::descr(ge_fcm_ic_pico, stats = c("n.valid", "mean", "sd", "min", "max"), transpose = TRUE,
#omit.headings = TRUE, style = "rmarkdown"), method="render")
x <- ge_fcm_ic_pico %>% select(day_julian, depth_m)
ge_fcm_ic_pico <- ge_fcm_ic %>%
filter(!is.na(Pico_mL) & (year==2016) ) %>%
mutate(day_julian = yday(date))
#print(summarytools::descr(ge_fcm_ic_pico, stats = c("n.valid", "mean", "sd", "min", "max"), transpose = TRUE,
#omit.headings = TRUE, style = "rmarkdown"), method="render")
x <- ge_fcm_ic_pico %>% select(day_julian, depth_m)
ge_fcm_ic_pico <- ge_fcm_ic %>%
filter(!is.na(Pico_mL) & (year==2016) ) %>%
mutate(day_julian = yday(date))
#print(summarytools::descr(ge_fcm_ic_pico, stats = c("n.valid", "mean", "sd", "min", "max"), transpose = TRUE,
#omit.headings = TRUE, style = "rmarkdown"), method="render")
x <- ge_fcm_ic_pico %>% select(day_julian, depth_m)
ge_fcm_ic_pico <- ge_fcm_ic %>%
filter(!is.na(Pico_mL) & (year==2016) ) %>%
mutate(day_julian = yday(date))
#print(summarytools::descr(ge_fcm_ic_pico, stats = c("n.valid", "mean", "sd", "min", "max"), transpose = TRUE,
#omit.headings = TRUE, style = "rmarkdown"), method="render")
x <- ge_fcm_ic_pico %>% select(day_julian, depth_m)
ge_fcm_ic_pico <- ge_fcm_ic %>%
filter(!is.na(Pico_mL) & (year==2016) ) %>%
mutate(day_julian = yday(date))
#print(summarytools::descr(ge_fcm_ic_pico, stats = c("n.valid", "mean", "sd", "min", "max"), transpose = TRUE,
#omit.headings = TRUE, style = "rmarkdown"), method="render")
x <- ge_fcm_ic_pico %>% select(day_julian, depth_m)
one_year <- 2016
if (one_year == 2016) {
xmin_gg=as.Date("2016-04-10")
xmax_gg=as.Date("2016-07-20")}
xmin <- min(ge_fcm_ic_pico$day_julian)- 2
xmax <- max(ge_fcm_ic_pico$day_julian) + 2
ymax <- 60 + 2
ymin <- 1.5 - 1.5
# Create binding polygon
x_coord <- c(xmin,
xmin,
176,
xmax,
xmax,
xmin)
y_coord <- c(ymin,
45,
ymax ,
ymax ,
ymin,
ymin)
polygon <- cbind(x_coord, y_coord)
polygon <- sp::Polygon(polygon)
polygons = sp::SpatialPolygons(list(sp::Polygons(list(polygon), "s1")))
# plot(polygons)
# Create grid
gridint <- 4 # Multiplyong factor to increase the resolution of the grid
gridx <- (xmax-xmin + 1)*gridint
gridy <- (ymax-ymin +1 )*gridint
grid <- raster::raster(nrows= gridy, ncols=gridx,
xmn=xmin,
xmx=xmax,
ymn=ymin, ymx=ymax)
# fit
fit_krig <- fields::Krig(x, y, theta=100)
coords.map <- get_stamenmap(map_bounds, zoom = 13, maptype = "toner-lite")
source('~/Desktop/ES4303/Data Assignment/Untitled.R', echo=TRUE)
plot(coords.map)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
ge_par_all <- read_csv("../metadata/Exp20210204_1.csv.gz")
ge_par_all <- read_csv("../metadata/Exp20210204_1.csv")
getwd
setwd
getwd
ge_par_all <- read_csv("../metadata/Exp_20210204_1.csv")
getwd
setwd
getwd
getwd()
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
library("tidyr")
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
# print(summarytools::descr(data, stats = c( "n.valid", "mean", "sd", "min", "max"), transpose = TRUE, omit.headings = TRUE), method="render")
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_fs = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
)
# Change these Variables depending on Flask (the plus 1 to account for january 1)
attempt_2_st <-   as.numeric(make_datetime (day = 4, hour = 15, min = 15))/(3600*24)+1
attempt_3_st <- as.numeric(make_datetime (day = 5, hour = 9, min = 25))/(3600*24)+1
data$julian_time <- ifelse(data$attempt == "2", attempt_2_st+(as.numeric(data$hour_fs)/24),
ifelse(data$attempt == "3", attempt_3_st+(as.numeric(data$hour_fs)/24),NA))
data_pico <- data %>%
select(`flask`,attempt,hour_fs, AorM, repli,julian_time,`Picochlorum Events`,`Picochlorum Events/μL(V)`, `Picochlorum Median FSC-A`, `Picochlorum SD FSC-A`, `Picochlorum Median SSC-A`, `Picochlorum SD SSC-A`, `Picochlorum Median PC5.5-A`, `Picochlorum SD PC5.5-A`, `Picochlorum Median PE-A`, `Picochlorum SD PE-A`)
plot1 <- ggplot(data_pico, aes(x = data_pico$julian_time, y = data_pico$`Picochlorum Events/μL(V)`))+
geom_point() +
xlab("Julian Time") +
ylab("Events/μL") +
theme_bw()+
theme(axis.text=element_text(size=28),
axis.title=element_text(size=28,face="bold"),
legend.title =element_text(size=28,face="bold"),
legend.text = element_text(size=28))
# png("../report_david/img/PAR_geomsmooth.png", width = 1000, height = 400)
plot1
# dev.off()
plot1 <- ggplot(data_pico, aes(x = data_pico$julian_time, y = data_pico$`Picochlorum Events/μL(V)`))+
geom_point() +
geom_smooth()
plot1 <- ggplot(data_pico, aes(x = data_pico$julian_time, y = data_pico$`Picochlorum Events/μL(V)`))+
geom_point() +
geom_smooth() +
xlab("Julian Time") +
ylab("Events/μL") +
theme_bw()+
theme(axis.text=element_text(size=28),
axis.title=element_text(size=28,face="bold"),
legend.title =element_text(size=28,face="bold"),
legend.text = element_text(size=28))
# png("../report_david/img/PAR_geomsmooth.png", width = 1000, height = 400)
plot1
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_fs = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
) %>%
dplyr::mutate(sample = c(flask,attempt,hour_fs,AorM,repli))
c(data$flask,data$attempt)
blah <- (data$flask,data$attempt)
blah <- (data$flask,data$attempt)
blah <- c(data$flask,data$attempt)
blah <- data.fram(c(data$flask,data$attempt))
blah <- data.fram(c(data$flask,data$attempt))
blah <- data.frame(c(data$flask,data$attempt))
View(blah)
d1 <- tibble(
x = letters[1:3],
y = LETTERS[1:3],
a = rnorm(3)
)
d2 <- tibble(
x2 = letters[3:1],
y2 = LETTERS[3:1],
b = rnorm(3)
)
left_join(d1, d2, by = c("x" = "x2", "y" = "y2"))
d1 <- tibble(
x = letters[1:3],
y = LETTERS[1:3],
a = rnorm(3)
)
d2 <- tibble(
x2 = letters[3:1],
y2 = LETTERS[3:1],
b = rnorm(3)
)
left_join(d1, d2, by = c("x" = "x2", "y" = "y2"))
View(d1)
View(d2)
# Read the data
data <- read_csv("../metadata/Exp_20210210_1.csv", skip = 2)
# Read the data
data <- read_csv("../metadata/Exp_20210210_1.csv", skip = 2)
View(data)
View(data)
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_fs = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
)
View(data)
# Read the data
data <- read_csv("../metadata/Exp_20210210_1.csv", skip = 2)
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_fs = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
)
View(data)
# Change these Variables depending on Flask (the plus 1 to account for january 1)
attempt_2_st <-   as.numeric(make_datetime (day = 4, hour = 15, min = 15))/(3600*24)+1
attempt_3_st <- as.numeric(make_datetime (day = 5, hour = 9, min = 25))/(3600*24)+1
data$julian_time <- ifelse(data$attempt == "2", attempt_2_st+(as.numeric(data$hour_fs)/24),
ifelse(data$attempt == "3", attempt_3_st+(as.numeric(data$hour_fs)/24),NA))
data_pico <- data %>%
select(`flask`,attempt,hour_fs, AorM, repli,julian_time,`Picochlorum Events`,`Picochlorum Events/μL(V)`, `Picochlorum Median FSC-A`, `Picochlorum SD FSC-A`, `Picochlorum Median SSC-A`, `Picochlorum SD SSC-A`, `Picochlorum Median PC5.5-A`, `Picochlorum SD PC5.5-A`, `Picochlorum Median PE-A`, `Picochlorum SD PE-A`)
View(data_pico)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
library("tidyr")
# Read the metadata
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
# print(summarytools::descr(data, stats = c( "n.valid", "mean", "sd", "min", "max"), transpose = TRUE, omit.headings = TRUE), method="render")
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_fs = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
)
# Change these Variables depending on Flask (the plus 1 to account for january 1)
attempt_2_st <-   as.numeric(make_datetime (day = 4, hour = 15, min = 15))/(3600*24)+1
attempt_3_st <- as.numeric(make_datetime (day = 5, hour = 9, min = 25))/(3600*24)+1
data$julian_time <- ifelse(data$attempt == "2", attempt_2_st+(as.numeric(data$hour_fs)/24),
ifelse(data$attempt == "3", attempt_3_st+(as.numeric(data$hour_fs)/24),NA))
data_pico <- data %>%
select(`flask`,attempt,hour_fs, AorM, repli,julian_time,`Picochlorum Events`,`Picochlorum Events/μL(V)`, `Picochlorum Median FSC-A`, `Picochlorum SD FSC-A`, `Picochlorum Median SSC-A`, `Picochlorum SD SSC-A`, `Picochlorum Median PC5.5-A`, `Picochlorum SD PC5.5-A`, `Picochlorum Median PE-A`, `Picochlorum SD PE-A`)
plot1 <- ggplot(data_pico, aes(x = data_pico$julian_time, y = data_pico$`Picochlorum Events/μL(V)`))+
geom_point() +
geom_smooth() +
xlab("Julian Time") +
ylab("Events/μL") +
theme_bw()+
theme(axis.text=element_text(size=28),
axis.title=element_text(size=28,face="bold"),
legend.title =element_text(size=28,face="bold"),
legend.text = element_text(size=28))
# png("../report_david/img/PAR_geomsmooth.png", width = 1000, height = 400)
plot1
# dev.off()
View(data)
View(data)
# Read the metadata
metadata <- data <- read_csv("../metadata/metadata.csv")
# Read the metadata
flaskdata <- data <- read_csv("../metadata/flaskdata.csv")
View(flaskdata)
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
# Read the metadata
flaskdata <- data <- read_csv("../metadata/flaskdata.csv")
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
library("lubridate")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
library("tidyr")
# Read the metadata
flaskdata <- data <- read_csv("../metadata/flaskdata.csv")
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_fs = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
)
# Read the metadata
flaskdata <- data <- read_csv("../metadata/flaskdata.csv")
# Read the metadata
flaskdata <- read_csv("../metadata/flaskdata.csv")
flaskdata <-
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
# Read the metadata
flaskdata <- read_csv("../metadata/flaskdata.csv")
flaskdata <-
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
# Read the metadata
flaskdata <- read_csv("../metadata/flaskdata.csv")
flaskdata <-
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
# Read the metadata
flaskdata <- read_csv("../metadata/flaskdata.csv")
# Read the data
data <- read_csv("../metadata/Exp_20210204_1.csv", skip = 2)
View(flaskdata)
flaskdata <- flaskdata %>%
dplyr::mutate(julian_st = as.numeric(make_datetime(day = flaskdata$`start date`, hour = flaskdata$`start hour`, min = flaskdata$`start min`)))
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_fs = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
)
files <- list.files(path = "/etc/dump",pattern = ".csv")
list.files(path = "../metadata/",pattern = ".csv")
list.files(path = "../metadata",pattern = ".csv")
list.files(path = "../metadata",pattern = "*.csv", full.names=TRUE)
list.files(path = "../metadata/",pattern = "*.csv", full.names=TRUE)
getwd
?list.files
getwd()
setwd(../metadata)
getwd()
?read_csv
setwd("/Users/davidmah/Documents/GitHub/Automatic water sampler/Automatic-Water-Sampler/Analysis")
mydir = "metadata"
myfiles = list.files(path=mydir, pattern="*.csv", full.names=TRUE)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::callFun("getActiveDocumentContext")$path)
getSrcDirectory(function(x) {x})
