print(events)
#dev.off()
# Comparing A and M samples
# Keep only rows of FAhi where both A and M exist
d_ss_mean_AM <- subset(d_ss_mean, FAhi %in% d_ss_mean[duplicated(d_ss_mean$FAhi),"FAhi"]$FAhi)
# Compare differences in
d_ss_mean_AM_A <- filter(d_ss_mean_AM,AorM == "A")
d_ss_mean_AM_M <- filter(d_ss_mean_AM,AorM == "M")
d_ss_mean_AM_A_ratio <-data.frame(c(d_ss_mean_AM_A[12],d_ss_mean_AM_A[-c(1:12)]/d_ss_mean_AM_M[-c(1:12)]))%>%
rename("Cells/μL" = Picochlorum.Events.μL.V._mean,
"FSC" = Picochlorum.Median.FSC.A_mean,
"SSC" = Picochlorum.Median.SSC.A_mean,
"PC5.5" = Picochlorum.Median.PC5.5.A_mean)
d_ss_mean_AM_A_ratio <- d_ss_mean_AM_A_ratio %>% gather(parameter, ratio, -time_since_tube_change)
preservation_plot <- ggplot(d_ss_mean_AM_A_ratio, aes(x = time_since_tube_change, y = ratio))+
geom_point() +
geom_hline(yintercept=1, linetype="dashed", color = "red")+
xlab("Time Since Tube Change") +
ylab("Ratio of Samples Kept at 4°C Prior to -80°C Storage \n against Samples Immediately Stored at -80°C") +
theme_bw() +
theme(title = element_text(size=16, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
preservation_plot <-  preservation_plot + facet_wrap(~parameter) +
theme(strip.text.x = element_text(size = 16))
png(file.path("../report/img","preservation_plot.png"), width = 800, height = 600)
print(preservation_plot)
dev.off()
crit_pts_all_para <- data.frame()
# Derivatives of events/ul graph to determine instantaneous growth rates!!
# Trying out npregfast package to get nonparametric derivative estimations
# For Events data
crit_pts_all <- data.frame()
all_der_plots <- list()
for (letter in unique(d_ss_mean$flask)) {
# remove A because it is the time is not continuous for 24h
if (letter == "A"){
} else {
# Mask out the first and last few points from the dataset
FLASK <- d_ss_mean %>%
filter(flask == letter, hr_since_light >=2 & hr_since_light <= 23) %>%
rename(events = `Picochlorum Events/μL(V)_mean`)
# Use npregfast::frfast to get the fit data
fit <- frfast(events~ hr_since_light, data = FLASK, p=2,h0=0.16, rank1 =9, ranku= 17, kbin = 300)
# Extract Critical points data
crit_pts <-data.frame(matrix(unlist(critical(fit)), nrow=length(critical(fit)), byrow=TRUE)) %>%
mutate(der = c("Estimation","First_der","Second_der")) %>%
mutate(flask = rep(letter, 3)) %>%
rename(Critical = X1,
Lwr = X2,
Upr = X3)
# Store ALL crit pt data
crit_pts <- mutate(crit_pts, light_regime = rep(FLASK$light_regime[1],nrow(crit_pts)))
crit_pts_all <- rbind(crit_pts_all, crit_pts)
# Create plots
est_plot <- autoplot(fit) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_x_continuous(breaks = breaks_width(2, 0)) +
ggtitle(paste("Flask",letter, sep = " ")) +
labs(x = 'Hours Since Start', y = 'Cells/μL')
plot_limits <-get_plot_limits(est_plot)
est_plot <- est_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
der1_plot <- autoplot(fit, der = 1) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_y_continuous(breaks = breaks_pretty(6),labels = hr2day) +
scale_x_continuous(breaks = breaks_width(2, 0)) +
labs(x = 'Hours Since Start', y = bquote(bold("day"^-1)))
plot_limits <-get_plot_limits(der1_plot)
der1_plot <- der1_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
# Change colour of lines for each light_regime
if (FLASK$light_regime[1] == "1608"){
use_col <- gg_color_hue(3)[3]
}else if (FLASK$light_regime[1] == "1212") {
use_col <- gg_color_hue(3)[2]
} else {
use_col <- gg_color_hue(3)[1]
}
# Store the derivative plot and add flask name
# Also add text indicating light regime
grob <- grobTree(textGrob(paste("Light Regime: ", FLASK$light_regime[1]), x=0,  y=0.95, hjust=0,
gp=gpar(col=use_col, fontsize=18)))
xmin<- 2.5
xmax<-21.5
if(filter(flaskdata, flask ==letter)$dark1_since_light1[1] <= xmin){
darkmin <- xmin
} else {darkmin<- filter(flaskdata, flask ==letter)$dark1_since_light1}
if(filter(flaskdata, flask ==letter)$light2_since_light1[1]>=xmax){
darkmax <- xmax
} else {darkmax <- filter(flaskdata, flask ==letter)$light2_since_light1}
all_der_plots[[letter]] <- der1_plot +
ggtitle(paste("Flask",letter, sep = " ")) +
annotation_custom(grob) +
scale_x_continuous(breaks = breaks_width(2, 0), limits = c(xmin,xmax)) +
annotate(geom = "rect",
xmin=darkmin,
xmax=darkmax,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black") +
geom_vline(xintercept = crit_pts[2,1], col = use_col, lwd = 2) +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
# create list for grobs in gridExtra
der1_plot <- der1_plot +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
est_plot <- est_plot + theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
p <- list(est_plot,der1_plot)
# Store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 600)
gridExtra::grid.arrange(grobs = p, ncol = 1, nrow = length(p))
dev.off()
}
}
# Create a plot of all derivatives stacked on top of each other (except A, H, and I)
# remove unnecessary plots from list
all_der_plots <- within(all_der_plots, rm(H, I))
# Reorder so that light regimes are in order
all_der_plots <- all_der_plots[c("B", "E", "F", "G", "L", "J", "K")]
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", "ALL", ".png", sep="_")), width = 1400, height = 1600)
gridExtra::grid.arrange(grobs = all_der_plots , ncol = 1, nrow = length(all_der_plots))
dev.off()
# Make a scatter plot for the points
events_change <- crit_pts_all%>%
filter(der == "First_der") %>%
select(Critical, flask) %>%
mutate(light_regime = c("1608", "1608", "1608", "1212", "1212", "0816", "0816", "0816", "1212")) %>%
filter(flask %in% c("B", "E", "F", "G", "J", "K", "L"))
dev.new()
png(file.path("../report/img",paste("Max_Events", "Change", ".png", sep="_")), width = 1200, height = 300)
ggplot(events_change, aes(light_regime, Critical))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(range(events_change$Critical)[1]-1,range(events_change$Critical)[2]+1 )) +
theme_bw() +
ggtitle("Events change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
crit_pts_all <- mutate(crit_pts_all, parameter = rep("events", nrow(crit_pts_all)))
crit_pts_all_para <- rbind(crit_pts_all_para, crit_pts_all)
graphics.off()
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
library("tidyr")
library("stringr")
library("scales")
# Create function to emulate ggplot colour scheme:
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
## Read the data
# Find all csv files
myfiles = list.files(path="../data/daily_data", pattern="*.csv", full.names=TRUE)
# Read all csv files
data_all <- lapply(myfiles, read_csv, skip =2)
data <- do.call(rbind, data_all)
# Split the tube names
data <- full_join(filter(data,
data$`Tube Name:` %in% str_subset(data$`Tube Name:`, "FF") == "TRUE") %>%
separate("Tube Name:", c("ID", "FF","dilu"), " "),
filter(data, data$`Tube Name:` %in% str_subset(data$`Tube Name:`, "FF") == "FALSE") %>%
separate("Tube Name:", c("ID","dilu"), " "))
# Split ID cell and dilution cells
data <- data %>%
separate(ID,
into = c("repli", "day"),
sep = "(?<=[A-Za-z])(?=[0-9])"
) %>%
separate(dilu,
into = c("dil_factor", "start_cells"),
sep = "(?<=[0-9])(?=[A-Za-z])"
) %>%
mutate(dil_factor = as.numeric(dil_factor)) %>%
mutate(day = as.numeric(day))
for (row in 1:nrow(data)){
# Replace NA with default values for columns ("day", "dil_factor", "FF")
if (is.na(data[row,"day"]) == "TRUE"){
data[row,"day"] <- -1
}
if (is.na(data[row,"dil_factor"]) == "TRUE"){
if (data[row,"day"] == 6){
data[row,"dil_factor"] <- 2}
else if (data[row,"day"] == 7){
data[row,"dil_factor"] <- 4}
else if (data[row,"day"] == 8){
data[row,"dil_factor"] <- 8}
else if (data[row,"day"] == 9){
data[row,"dil_factor"] <- 16}
else {data[row,"dil_factor"] <- 1
}
}
if (is.na(data[row,"FF"]) == "TRUE"){
data[row,"FF"] <- "NFF"
}
if (data[row,"repli"] == "A"|data[row,"repli"] == "B"|data[row,"repli"] == "C"){
data[row,"start_cells"] <- "10000"
}
if (data[row,"repli"] == "X"|data[row,"repli"] == "Y"|data[row,"repli"] == "Z"){
data[row,"start_cells"] <- "1000"
}
}
# Create metadata df
time_start <- data.frame("year" = 2020, "month" = 10, "day" = 21, "hour" = 11, "min" = 30) %>%
dplyr::mutate("datetime" = make_datetime(year, month, day, hour, min))
data <- data %>%
dplyr::mutate("sample_datetime" = day*(60*60*24) + time_start$datetime,
"day_start_cells" = paste(day,start_cells, sep = ""),
"Weighted Picochlorum Events/μL(V)" = data$`Picochlorum Events/μL(V)` * (data$dil_factor))
# Extract the more useful data
data_pico <- data %>%
select(day_start_cells,start_cells,`repli`,day, FF, dil_factor,sample_datetime,`Weighted Picochlorum Events/μL(V)`,`Picochlorum Events/μL(V)`, `Picochlorum Median FSC-A`, `Picochlorum Median SSC-A`, `Picochlorum Median PC5.5-A`)
# Select rows of dilutions that best fit 10^3 rule
data_pico_no0<- filter(data_pico,repli =="A"|repli == "B"|repli == "C"|repli == "X"|repli == "Y"|repli == "Z")
data_pico_no0_Rdil<- data.frame()
keep_rows <-data.frame()
for(row in 1:nrow(data_pico_no0)){
if(data_pico_no0[row,"day"] == 10){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 16)
}
else if(data_pico_no0[row,"day"] == 11){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 32)
}
else if(data_pico_no0[row,"day"] == 12){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 32)
}
else if(data_pico_no0[row,"day"] == 13){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 64)
}
else if(data_pico_no0[row,"day"] == 14){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 64)
}
else {
keep_rows <- data_pico_no0[row,]
}
data_pico_no0_Rdil <-rbind(data_pico_no0_Rdil,keep_rows)
}
# Mean of optimal dilutions for each starting concentration
data_pico_mean <- data_pico_no0_Rdil %>%
group_by(day_start_cells,start_cells, day,FF, dil_factor, sample_datetime) %>%
summarise_at(.vars = names(.)[8:12],
.funs = c(mean="mean")) %>%
transform(day = as.numeric(day)) %>%
transform(dil_factor = as.numeric(dil_factor))
# Plot for Events
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title=expression(paste("Optimal Sampling Window of Strain SMS40 (", italic("Picochlorum sp."), ")"))) +
labs(color='Storage Procedure') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("Flash Frozen in Liquid N", "Immediate Storage at -80°C"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=16, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=14))
events <- events +
facet_wrap(~start_cells, labeller = labeller(start_cells = c("1000" = "Starting Conc of 10^3 cells/ml",
"10000" = "Starting Conc of 10^4 cells/ml"))) +
theme(strip.text.x = element_text(size = 16))
events
png("../report/img/daily_growth.png", width = 1000, height = 600)
print(events)
dev.off()
# Plot of comparison between FF and NFF
# get df of only
# Keep only rows of FAhi where both FF and NFF exist
only_ff_nff <- subset(data_pico_mean, day_start_cells %in% data_pico_mean[duplicated(data_pico_mean$day_start_cells),"day_start_cells"])
# Compare differences in
only_ff <- filter(only_ff_nff,FF == "FF")
only_nff <- filter(only_ff_nff,FF == "NFF")
FF_ratio <-data.frame(c(only_ff[1:6],only_nff[-c(1:6)]/only_ff[-c(1:6)])) %>%
rename("Events/μL" = Picochlorum.Events.μL.V._mean,
"FSC" = Picochlorum.Median.FSC.A_mean,
"SSC" = Picochlorum.Median.SSC.A_mean,
"PC5.5" = Picochlorum.Median.PC5.5.A_mean)
FF_ratio <- FF_ratio[,c(3,8:11)]
FF_ratio <- FF_ratio %>% gather(parameter, ratio, -day)
p <- ggplot(FF_ratio, aes(x=parameter, y=ratio)) +
geom_boxplot(fill="gray") +
labs(title="Ratio of FCM parameters of direct -80°C storage against flash-freeze",x="FCM Parameters", y = "Ratio")+
theme_classic() +
theme(title = element_text(size=14, face="bold"),
axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"))
png(file.path("../report/img","Daily_FF_NFF.png"), width = 800, height = 400)
print(p)
dev.off()
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
library("tidyr")
library("stringr")
library("scales")
# Create function to emulate ggplot colour scheme:
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
## Read the data
# Find all csv files
myfiles = list.files(path="../data/daily_data", pattern="*.csv", full.names=TRUE)
# Read all csv files
data_all <- lapply(myfiles, read_csv, skip =2)
data <- do.call(rbind, data_all)
# Split the tube names
data <- full_join(filter(data,
data$`Tube Name:` %in% str_subset(data$`Tube Name:`, "FF") == "TRUE") %>%
separate("Tube Name:", c("ID", "FF","dilu"), " "),
filter(data, data$`Tube Name:` %in% str_subset(data$`Tube Name:`, "FF") == "FALSE") %>%
separate("Tube Name:", c("ID","dilu"), " "))
# Split ID cell and dilution cells
data <- data %>%
separate(ID,
into = c("repli", "day"),
sep = "(?<=[A-Za-z])(?=[0-9])"
) %>%
separate(dilu,
into = c("dil_factor", "start_cells"),
sep = "(?<=[0-9])(?=[A-Za-z])"
) %>%
mutate(dil_factor = as.numeric(dil_factor)) %>%
mutate(day = as.numeric(day))
for (row in 1:nrow(data)){
# Replace NA with default values for columns ("day", "dil_factor", "FF")
if (is.na(data[row,"day"]) == "TRUE"){
data[row,"day"] <- -1
}
if (is.na(data[row,"dil_factor"]) == "TRUE"){
if (data[row,"day"] == 6){
data[row,"dil_factor"] <- 2}
else if (data[row,"day"] == 7){
data[row,"dil_factor"] <- 4}
else if (data[row,"day"] == 8){
data[row,"dil_factor"] <- 8}
else if (data[row,"day"] == 9){
data[row,"dil_factor"] <- 16}
else {data[row,"dil_factor"] <- 1
}
}
if (is.na(data[row,"FF"]) == "TRUE"){
data[row,"FF"] <- "NFF"
}
if (data[row,"repli"] == "A"|data[row,"repli"] == "B"|data[row,"repli"] == "C"){
data[row,"start_cells"] <- "10000"
}
if (data[row,"repli"] == "X"|data[row,"repli"] == "Y"|data[row,"repli"] == "Z"){
data[row,"start_cells"] <- "1000"
}
}
# Create metadata df
time_start <- data.frame("year" = 2020, "month" = 10, "day" = 21, "hour" = 11, "min" = 30) %>%
dplyr::mutate("datetime" = make_datetime(year, month, day, hour, min))
data <- data %>%
dplyr::mutate("sample_datetime" = day*(60*60*24) + time_start$datetime,
"day_start_cells" = paste(day,start_cells, sep = ""),
"Weighted Picochlorum Events/μL(V)" = data$`Picochlorum Events/μL(V)` * (data$dil_factor))
# Extract the more useful data
data_pico <- data %>%
select(day_start_cells,start_cells,`repli`,day, FF, dil_factor,sample_datetime,`Weighted Picochlorum Events/μL(V)`,`Picochlorum Events/μL(V)`, `Picochlorum Median FSC-A`, `Picochlorum Median SSC-A`, `Picochlorum Median PC5.5-A`)
# Select rows of dilutions that best fit 10^3 rule
data_pico_no0<- filter(data_pico,repli =="A"|repli == "B"|repli == "C"|repli == "X"|repli == "Y"|repli == "Z")
data_pico_no0_Rdil<- data.frame()
keep_rows <-data.frame()
for(row in 1:nrow(data_pico_no0)){
if(data_pico_no0[row,"day"] == 10){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 16)
}
else if(data_pico_no0[row,"day"] == 11){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 32)
}
else if(data_pico_no0[row,"day"] == 12){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 32)
}
else if(data_pico_no0[row,"day"] == 13){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 64)
}
else if(data_pico_no0[row,"day"] == 14){
keep_rows <- filter(data_pico_no0[row,],dil_factor == 64)
}
else {
keep_rows <- data_pico_no0[row,]
}
data_pico_no0_Rdil <-rbind(data_pico_no0_Rdil,keep_rows)
}
# Mean of optimal dilutions for each starting concentration
data_pico_mean <- data_pico_no0_Rdil %>%
group_by(day_start_cells,start_cells, day,FF, dil_factor, sample_datetime) %>%
summarise_at(.vars = names(.)[8:12],
.funs = c(mean="mean")) %>%
transform(day = as.numeric(day)) %>%
transform(dil_factor = as.numeric(dil_factor))
# Plot for Events
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title=expression(paste("Optimal Sampling Window of Strain SMS40 (", italic("Picochlorum sp."), ")"))) +
labs(color='Storage Procedure') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("Flash Frozen in Liquid N", "Immediate Storage at -80°C"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=16, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=14))
events <- events +
facet_wrap(~start_cells, labeller = labeller(start_cells = c("1000" = "Starting Conc of 10^3 cells/ml",
"10000" = "Starting Conc of 10^4 cells/ml"))) +
theme(strip.text.x = element_text(size = 16))
events
png("../report/img/daily_growth.png", width = 1000, height = 600)
print(events)
dev.off()
# Plot of comparison between FF and NFF
# get df of only
# Keep only rows of FAhi where both FF and NFF exist
only_ff_nff <- subset(data_pico_mean, day_start_cells %in% data_pico_mean[duplicated(data_pico_mean$day_start_cells),"day_start_cells"])
# Compare differences in
only_ff <- filter(only_ff_nff,FF == "FF")
only_nff <- filter(only_ff_nff,FF == "NFF")
FF_ratio <-data.frame(c(only_ff[1:6],only_nff[-c(1:6)]/only_ff[-c(1:6)])) %>%
rename("Cells/μL" = Picochlorum.Events.μL.V._mean,
"FSC" = Picochlorum.Median.FSC.A_mean,
"SSC" = Picochlorum.Median.SSC.A_mean,
"PC5.5" = Picochlorum.Median.PC5.5.A_mean)
FF_ratio <- FF_ratio[,c(3,8:11)]
FF_ratio <- FF_ratio %>% gather(parameter, ratio, -day)
p <- ggplot(FF_ratio, aes(x=parameter, y=ratio)) +
geom_boxplot(fill="gray") +
labs(title="Ratio of FCM parameters of direct -80°C storage against flash-freeze",x="FCM Parameters", y = "Ratio")+
theme_classic() +
theme(title = element_text(size=14, face="bold"),
axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"))
png(file.path("../report/img","Daily_FF_NFF.png"), width = 800, height = 400)
print(p)
dev.off()
