## Plot for all flasks with temperature
get_plot_limits <- function(plot) {
gb = ggplot_build(plot)
xmin = gb$layout$panel_params[[1]]$x.range[1]
xmax = gb$layout$panel_params[[1]]$x.range[2]
ymin = gb$layout$panel_params[[1]]$y.range[1]
ymax = gb$layout$panel_params[[1]]$y.range[2]
list(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)
}
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$sample_datetime, y = FLASK$`Picochlorum Events/μL(V)`))+
scale_y_continuous(trans = log10_trans(), sec.axis = sec_axis(~./4, name = "Temperature"))
plot_limits<-get_plot_limits(events)
events <- events + annotate(geom = "rect",
xmin=as_datetime(filter(flaskdata, flask =="E")$dark_on_datetime_1),
xmax=as_datetime(filter(flaskdata, flask =="E")$light_on_datetime_2),
ymin=10^plot_limits[[3]],
ymax=10^plot_limits[[4]], alpha= 0.9, fill = "grey") +
geom_point(aes(color = flask)) +
geom_line(aes(y = Temperature*4, colour = "Temperature")) +
xlab("Sample Date Time") +
ylab("Log(Events/μL)") +
ggtitle("All Flasks Picochlorum Events/μL")
labs(col="Light \nCondition") +
theme_bw()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold"),
legend.title =element_text(size=12,face="bold"),
legend.text = element_text(size=12),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#png(file.path("../report/img","Events_Facet_Wrap.png"), width = 800, height = 600)
print(events)
#dev.off()
## Plot for all flasks with temperature
get_plot_limits <- function(plot) {
gb = ggplot_build(plot)
xmin = gb$layout$panel_params[[1]]$x.range[1]
xmax = gb$layout$panel_params[[1]]$x.range[2]
ymin = gb$layout$panel_params[[1]]$y.range[1]
ymax = gb$layout$panel_params[[1]]$y.range[2]
list(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)
}
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$sample_datetime, y = FLASK$`Picochlorum Events/μL(V)`))+
scale_y_continuous(trans = log10_trans(), sec.axis = sec_axis(~./4, name = "Temperature"))
plot_limits<-get_plot_limits(events)
events <- events + annotate(geom = "rect",
xmin=as_datetime(filter(flaskdata, flask =="E")$dark_on_datetime_1),
xmax=as_datetime(filter(flaskdata, flask =="E")$light_on_datetime_2),
ymin=10^plot_limits[[3]],
ymax=10^plot_limits[[4]], alpha= 0.5, fill = "black") +
geom_point(aes(color = flask)) +
geom_line(aes(y = Temperature*4, colour = "Temperature")) +
xlab("Sample Date Time") +
ylab("Log(Events/μL)") +
ggtitle("All Flasks Picochlorum Events/μL")
labs(col="Light \nCondition") +
theme_bw()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold"),
legend.title =element_text(size=12,face="bold"),
legend.text = element_text(size=12),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#png(file.path("../report/img","Events_Facet_Wrap.png"), width = 800, height = 600)
print(events)
#dev.off()
events <- events + annotate(geom = "rect",
xmin=as_datetime(filter(flaskdata, flask =="E")$dark_on_datetime_1),
xmax=as_datetime(filter(flaskdata, flask =="E")$light_on_datetime_2),
ymin=10^plot_limits[[3]],
ymax=10^plot_limits[[4]], alpha= 0.5, fill = "black") +
geom_pointrange(aes(color = flask)) +
geom_line(aes(y = Temperature*4, colour = "Temperature")) +
xlab("Sample Date Time") +
ylab("Log(Events/μL)") +
ggtitle("All Flasks Picochlorum Events/μL")
labs(col="Light \nCondition") +
theme_bw()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold"),
legend.title =element_text(size=12,face="bold"),
legend.text = element_text(size=12),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#png(file.path("../report/img","Events_Facet_Wrap.png"), width = 800, height = 600)
print(events)
View(data)
View(data_pico_mean)
View(data_pico)
FLASK<- filter(data_pico,flask == "E")
print(events)
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$julian_time, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", letter)) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
events <- ggplot(FLASK, aes(x = FLASK$julian_time, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", "E")) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
# Linear Model of Ln Events/ul to get growth rates etc
# Create function to generate regression plot
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes(x = fit$model[,2], y = fit$model[,1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab(names(model$model[2]))+
ylab(names(model$model[1])) +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5))) +
theme_bw()
}
# Create function to capture and calculate growth rate data
growth_rate <- function (model){
# Use fitted.values so that you are taking the slope of the linear model and not calculating growth rates based on 1st and last points alone!
(last(model$fitted.values)-first(model$fitted.values))/as.numeric(last(model$model[2][,1])-first(model$model[2][,1]))
}
# Plot and store growth rate data
growth_data <- data.frame()
plot_list = list()
for (letter in 1:as.numeric(tally(plyr::count(unique(data_pico_mean$flask))))) {
FLASK <- filter(data_pico_mean, flask == unique(data_pico_mean$flask)[letter])
# Plot model for each flask
model = lm(log(FLASK$`Picochlorum Events/μL(V)_mean`)~ sample_datetime, data = FLASK)
# Create File path and name for each plot generated
file_name <- file.path("../report/img",paste("linear_model_flask_", unique(data_pico_mean$flask)[letter], ".png", sep=""))
# Store all models in a list
plot_list[[letter]] = model
# Create plot and add title
p <- ggplotRegression(model) + ggtitle(paste("Flask", unique(data_pico_mean$flask)[letter]))
# Print and store all ggplotRegression plots
dev.new()
png(file.path("../report/img",paste("linear_model_flask_", unique(data_pico_mean$flask)[letter], ".png", sep="")), width = 800, height = 600)
print(p)
dev.off()
# Store all growth rate data in a df
growth <- c("r" = growth_rate(model), "k" = growth_rate(model)/log(2), "T2" = log(2)/growth_rate(model))
growth_data <- rbind(growth_data, growth)
}
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$julian_time, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
stat_smooth() +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", "E")) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$sample_datetime, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
stat_smooth() +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", "E")) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
ggbuild(events)
ggplot_build(events)
what <- ggplot_build(events)
View(what)
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$sample_datetime, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
# stat_smooth() +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", "E")) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
# Derivative of this curve is formula for instantaneous growth rate for time (t)
# Integral of the new growth rate curve below line and above axis is growing and below axis and above line is dying
what <- ggplot_build(events)
View(what)
View(what)
what <- ggplot_build(events)
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$sample_datetime, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
stat_smooth() +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", "E")) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
what <- ggplot_build(events)
View(what)
what <- ggplot_build(events)
print(events)
model0 <- lm(y~I(sin(2*pi*x/360)))
# Linear Model of Ln Events/ul to get growth rates etc
# Create function to generate regression plot
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes(x = fit$model[,2], y = fit$model[,1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab(names(model$model[2]))+
ylab(names(model$model[1])) +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5))) +
theme_bw()
}
# Create function to capture and calculate growth rate data
growth_rate <- function (model){
# Use fitted.values so that you are taking the slope of the linear model and not calculating growth rates based on 1st and last points alone!
(last(model$fitted.values)-first(model$fitted.values))/as.numeric(last(model$model[2][,1])-first(model$model[2][,1]))
}
# Plot and store growth rate data
growth_data <- data.frame()
plot_list = list()
for (letter in 1:as.numeric(tally(plyr::count(unique(data_pico_mean$flask))))) {
FLASK <- filter(data_pico_mean, flask == unique(data_pico_mean$flask)[letter])
# Plot model for each flask
model = lm(log(FLASK$`Picochlorum Events/μL(V)_mean`)~ sample_datetime, data = FLASK)
# Create File path and name for each plot generated
file_name <- file.path("../report/img",paste("linear_model_flask_", unique(data_pico_mean$flask)[letter], ".png", sep=""))
# Store all models in a list
plot_list[[letter]] = model
# Create plot and add title
p <- ggplotRegression(model) + ggtitle(paste("Flask", unique(data_pico_mean$flask)[letter]))
# Print and store all ggplotRegression plots
dev.new()
png(file.path("../report/img",paste("linear_model_flask_", unique(data_pico_mean$flask)[letter], ".png", sep="")), width = 800, height = 600)
print(p)
dev.off()
# Store all growth rate data in a df
growth <- c("r" = growth_rate(model), "k" = growth_rate(model)/log(2), "T2" = log(2)/growth_rate(model))
growth_data <- rbind(growth_data, growth)
}
model0 <- lm(y~I(sin(2*pi*x/360)))
events <- FLASK$`Picochlorum Events/μL(V)`
evnts <- FLASK$`Picochlorum Events/μL(V)`
timee <- FLASK$sample_datetime
model0 <- lm(evnts~timee(sin(2*pi*x/360)))
timee <- FLASK$sample_datetime
model0 <- lm(evnts~I(sin(2*pi*timee/360)))
model0 <- lm(evnts~I(sin(2*pi*as.numeric(timee)/360)))
summary(model0)
View(FLASK)
what[["data"]][[2]][["x"]]
model_test(model0)
?model_test
model0 <- lm(evnts~sin(2*pi*as.numeric(timee)/360))
summary(model0)
model0 <- lm(evnts~sin(timee))
model0 <- lm(evnts~sin(as.numeric(timee)))
summary(model0)
tcos<-cos(2*pi*as.numeric(timee)/360)
tsin<-sin(2*pi*as.numeric(timee)/360)
model <-lm(evnts~tcos + tsin)
summary(model)
tcos<-cos(2*pi*(as.numeric(timee))/360)
tsin<-sin(2*pi*(as.numeric(timee))/360)
model <-lm(evnts~tcos + tsin)
summary(model)
model <-lm(evnts~tcos + tsin)
summary(model)
model_test <- lm(evnts~sin(as.numeric(timee)))
summary(model0)
summary(model_test)
model_test <- lm(evnts~pi*sin(as.numeric(timee)))
model_test <- lm(evnts~sin(as.numeric(timee))*pi)
model_test <- lm(evnts~sin(2*as.numeric(timee)))
summary(model_test)
model_test <- lm(evnts~sin(2*pi*as.numeric(timee)))
summary(model_test)
model_test <- lm(evnts~sin(2*pi*as.numeric(timee)/360))
summary(model_test)
model_test <- lm(evnts~sin(2*pi*as.numeric(timee)))
summary(model_test)
model_test <- lm(evnts~sin(2*pi*as.numeric(timee)/36))
summary(model_test)
model_test <- lm(evnts~sin(2*pi*as.numeric(timee)/3))
summary(model_test)
model
model_test
as.numeric(timee)
as.numeric(timee)/360
as.numeric(timee)*pi
2*pi*(as.numeric(timee))/360
cos(2*pi*(as.numeric(timee))/360)
cos(1000)
cos(1000000000)
cos(1000000)
cos(10000)
cos(28151025)
2*pi*(as.numeric(timee))/360
cos(2*pi*(as.numeric(timee))/360)
cos((2*pi*(as.numeric(timee))/360))
2*pi*(as.numeric(timee))
cos(2*pi*(as.numeric(timee)))
cos(as.numeric(timee))
cos(2*as.numeric(timee))
cos(2*pi*as.numeric(timee))
cos(2*as.numeric(timee)/360)
model_test <- lm(evnts~sin(as.numeric(timee)/360))
summary(model_test)
tcos<-cos(2*(as.numeric(timee))/360)
tsin<-sin(2*(as.numeric(timee))/360)
model <-lm(evnts~tcos + tsin)
summary(model)
model <-lm(evnts~tsin + tcos)
summary(model)
model <-lm(evnts~tcos + tsin)
summary(model)
tcos<-cos(2*3.14159*(as.numeric(timee))/360)
tsin<-sin(2*3.14159*(as.numeric(timee))/360)
model <-lm(evnts~tcos + tsin)
summary(model)
cos(2*3.14159*(as.numeric(timee))/360)
cos(pi)
cos(pi/360)
cos(pi)
cos(pi*3)
cos(pi*342342)
cos(pi*342341)
model_test <- lm(evnts~sin(as.numeric(timee)/36000))
summary(model_test)
model_test <- lm(evnts~sin(as.numeric(timee)/12345))
summary(model_test)
tcos<-cos(2*pi*(as.numeric(timee))/1234)
tsin<-sin(2*pi*(as.numeric(timee))/1234)
model <-lm(evnts~tcos + tsin)
summary(model)
tcos
tsin<-sin(2*pi*(as.numeric(timee)))
tcos<-cos(2*pi*(as.numeric(timee)))
tcos
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$sample_datetime, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
stat_smooth() +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", "E")) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
ggplot_build(events)
sup <- ggplot_build(events)
View(sup)
sup$data[[2]]
sup$data[[2]]
print(events)
sup$data[[1]]
model <- loess(evnts~timee)
model <- loess(evnts~timee)
model <- loess(evnts~as.numeric(timee))
summary(model)
model
summary(model)
install.packages("pspline")
# Trying out pspline package to get nonparametric derivative estimations
library(pspline)
# Trying out pspline package to get nonparametric derivative estimations
library("pspline")
?smooth.Pspline
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)`, df=5, method=3)
View(data_pico_mean)
FLASK <- filter(data_pico_mean, flask == "E")
FLASK <- filter(data_pico_mean, flask == "E")
library("pspline")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)`, df=5, method=3)
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, df=5, method=3)
FLASK$julian_time
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
library("pspline")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, df=5, method=3)
f0 <- predict(pspl, x, nderiv=0)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
f0
plot(f0)
print(events)
FLASK<- filter(data_pico,flask == "E")
events <- ggplot(FLASK, aes(x = FLASK$sample_datetime, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
stat_smooth() +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", "E")) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
print(events)
sup <- ggplot_build(events)
sup$data[[2]]
plot(f0)
plot(pspl)
plot(pspl)
plot(f0)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
f0
FLASK$julian_time
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, df=5, method=3)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
plot(f0)
f0
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, df=5, method=3)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, method=1)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
plot(pspl)
lines(
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, method=1)
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, method=1)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, method=3)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, method = 4)
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, method = 4)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
plot(pspl)
lines(FLASK$julian_time, f1, lwd=3, lty=2, col="red")
FLASK <- filter(data_pico_mean, flask == "E",AorM == "A")
pspl <- smooth.Pspline(FLASK$julian_time, FLASK$`Picochlorum Events/μL(V)_mean`, method = 4)
f0 <- predict(pspl, FLASK$julian_time, nderiv=0)
plot(pspl)
lines(FLASK$julian_time, f0, lwd=3, lty=2, col="red")
f1 <- predict(pspl, FLASK$julian_time, nderiv=1)
plot(pspl)
lines(FLASK$julian_time, f1, lwd=3, lty=2, col="red")
f1
plot(f1)
lines(FLASK$julian_time, f1, lwd=3, lty=2, col="red")
plot(f1)
lines(
)
?lines
