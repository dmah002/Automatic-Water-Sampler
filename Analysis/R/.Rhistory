axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#png(file.path("../report/img","Events_Facet_Wrap.png"), width = 800, height = 600)
print(events)
#dev.off()
## Plot for Events
# Facet wrap plot of all Flasks together
events <- ggplot(d_ss, aes(x = julian_time, y = log(`Picochlorum Events/μL(V)`)))+
geom_smooth() +
geom_point(aes(color = lightORdark)) +
xlab("Time Since Start") +
ylab("Log(Events/μL)") +
ggtitle("All Flasks Picochlorum Events/μL")
labs(col="Light \nCondition") +
theme_bw()+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold"),
legend.title =element_text(size=12,face="bold"),
legend.text = element_text(size=12))
events <- events + facet_wrap(~flask)
png(file.path("../report/img","Events_Facet_Wrap.png"), width = 800, height = 600)
print(events)
dev.off()
# Plot for Events/μL
for (letter in unique(d_ss$flask)) {
FLASK<- filter(d_ss,flask == letter)
events <- ggplot(FLASK, aes(x = FLASK$julian_time, y = FLASK$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark)) +
xlab("Time since start") +
ylab("Median Events/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", letter)) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("Events", letter, ".png", sep="_")), width = 800, height = 600)
print(events)
dev.off()
}
# Plot for log(Events)/μL
for (letter in unique(d_ss$flask)) {
FLASK<- filter(d_ss,flask == letter)
events <- ggplot(FLASK, aes(x = FLASK$julian_time, y = log(FLASK$`Picochlorum Events/μL(V)`)))+
geom_point(aes(color = lightORdark)) +
xlab("Time since start") +
ylab("Log(Median Events)/μL") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", letter)) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("Events_log", letter, ".png", sep="_")), width = 800, height = 600)
print(events)
dev.off()
}
# Plot for FSC
for (letter in unique(d_ss$flask)) {
FLASK<- filter(d_ss,flask == letter)
FSC <- ggplot(FLASK, aes(x = FLASK$julian_time, y = FLASK$`Picochlorum Median FSC-A`))+
geom_point(aes(color = lightORdark)) +
xlab("Time since start") +
ylab("Median FSC") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", letter)) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("FSC", letter, ".png", sep="_")), width = 800, height = 600)
print(FSC)
dev.off()
}
# Plot for SSC
for (letter in unique(d_ss$flask)) {
FLASK<- filter(d_ss,flask == letter)
SSC <- ggplot(FLASK, aes(x = FLASK$julian_time, y = FLASK$`Picochlorum Median SSC-A`))+
geom_point(aes(color = lightORdark)) +
xlab("Time since start") +
ylab("Median SSC") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", letter)) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("SSC", letter, ".png", sep="_")), width = 800, height = 600)
print(SSC)
dev.off()
}
# Plot for CHL-A
for (letter in unique(d_ss$flask)) {
FLASK<- filter(d_ss,flask == letter)
PC5.5 <- ggplot(FLASK, aes(x = FLASK$julian_time, y = FLASK$`Picochlorum Median PC5.5-A`))+
geom_point(aes(color = lightORdark)) +
xlab("Time since start") +
ylab("Median PC5.5") +
labs(col="Light \nCondition") +
theme_bw() +
ggtitle(paste("Flask", letter)) +
theme(plot.title = element_text(size = 28, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=20,face="bold"),
legend.text = element_text(size=20))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("PC5.5", letter, ".png", sep="_")), width = 800, height = 600)
print(PC5.5)
dev.off()
}
# This is to clear the device list (dev.list())
graphics.off()
## Find out how to normalise this! Use the other columns in your analysis
# Plot of multiple light regimes together
REGIME<-filter(d_ss,light_regime == "1608")
regime_plot <- ggplot(REGIME, aes(x = REGIME$julian_time, y = REGIME$`Picochlorum Events/μL(V)`))+
geom_point(aes(color = lightORdark, shape = flask)) +
xlab("Time Since Start") +
ylab("FSC") +
labs(col="Light \nCondition", shape = "Flask") +
theme_bw()+
theme(axis.text=element_text(size=28),
axis.title=element_text(size=28,face="bold"),
legend.title =element_text(size=28,face="bold"),
legend.text = element_text(size=28))
regime_plot
# Comparing A and M samples
# group_by selects all the descriptive columns so that the function later on applied through summarise_at will not affect it.
d_ss_mean <- d_ss %>%
group_by(flask, attempt,hour_index, FAhi, AorM,light_regime, julian_time,sample_datetime, sample_time, lightORdark, time_since_tube_change) %>%
summarise_at(.vars = names(.)[13:16],
.funs = c(mean="mean"))
# Keep only rows of FAhi where both A and M exist
d_ss_mean_AM <- subset(d_ss_mean, FAhi %in% d_ss_mean[duplicated(d_ss_mean$FAhi),"FAhi"]$FAhi)
# Compare differences in
d_ss_mean_AM_A <- filter(d_ss_mean_AM,AorM == "A")
d_ss_mean_AM_M <- filter(d_ss_mean_AM,AorM == "M")
d_ss_mean_AM_A_ratio <-data.frame(c(d_ss_mean_AM_A[1:11],d_ss_mean_AM_A[-c(1:11)]/d_ss_mean_AM_M[-c(1:11)]))
preservation_plot <- ggplot(d_ss_mean_AM_A_ratio, aes(x = time_since_tube_change, y = Picochlorum.Events.μL.V._mean))+
geom_point(aes(color = flask)) +
xlab("Time Since Tube Change") +
#  ylab("FSC") +
labs(col = "Flask") +
theme_bw()
preservation_plot
# Derivatives of events/ul graph to determine instantaneous growth rates!!
# Trying out npregfast package to get nonparametric derivative estimations
# # Test flask use E
# d_ss_mean <- d_ss_mean %>% transform(hour_index = as.numeric(hour_index))
#
# FLASK <- filter(d_ss_mean, flask == "E")
# FLASK2 <- filter(d_ss_mean, flask == "F")
# # Plot of actual plus derivative!!!
# fit <- frfast(`Picochlorum.Events.μL.V._mean`~ hour_index, data = FLASK)
# fit2 <- frfast(`Picochlorum.Events.μL.V._mean`~ hour_index, data = FLASK2)
# autoplot(fit) + theme_bw()
# autoplot(fit, der = 1) + theme_bw()
# autoplot(fit2, der = 1) + theme_bw()
#
#
# # For plotting two derivatives in the same graphic window
#   ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
#                    theme_bw()+
#                    scale_x_continuous(breaks=seq(0,30,1)))
# gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
#
# what <- data.frame(cbind(der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]])))
# Now make it into a loop and generate a plot for each
crit_pts <- data.frame()
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum.Events.μL.V._mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
# Creation of dataframe containing critical point info
crit_pts <- rbind(crit_pts,data.frame(cbind(flask = c(letter,letter,letter),der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]]))))
}
View(FLASK)
# Derivatives of events/ul graph to determine instantaneous growth rates!!
# Trying out npregfast package to get nonparametric derivative estimations
# # Test flask use E
# d_ss_mean <- d_ss_mean %>% transform(hour_index = as.numeric(hour_index))
#
# FLASK <- filter(d_ss_mean, flask == "E")
# FLASK2 <- filter(d_ss_mean, flask == "F")
# # Plot of actual plus derivative!!!
# fit <- frfast(`Picochlorum.Events.μL.V._mean`~ hour_index, data = FLASK)
# fit2 <- frfast(`Picochlorum.Events.μL.V._mean`~ hour_index, data = FLASK2)
# autoplot(fit) + theme_bw()
# autoplot(fit, der = 1) + theme_bw()
# autoplot(fit2, der = 1) + theme_bw()
#
#
# # For plotting two derivatives in the same graphic window
#   ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
#                    theme_bw()+
#                    scale_x_continuous(breaks=seq(0,30,1)))
# gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
#
# what <- data.frame(cbind(der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]])))
# Now make it into a loop and generate a plot for each
crit_pts <- data.frame()
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum Events/μL(V)_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
# Creation of dataframe containing critical point info
crit_pts <- rbind(crit_pts,data.frame(cbind(flask = c(letter,letter,letter),der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]]))))
}
# While critical does a good job in identifying the hour_index at the point of inflection for some of the plots, very often it is looking at the wrong maximum of the covariate of x for the estimate, or the wrong maximum for the 1st der, or the  wrong intersection with 0 for the 2nd der. In the cases that it is totally off, we will just get the results manually through looking at the graph:
events_change <- data.frame(flask = c("E","F","G","J","K","L" ),
hour_index = c(12.5645645645646,
12.8,
13.2,
13.7,
14,
13.2632632632633),
light_regime = c("1608","1608","1212","0816","0816","1212"))
dev.new()
png(file.path("../report/img",paste("Max_Events", "Change", ".png", sep="_")), width = 1200, height = 600)
ggplot(events_change, aes(light_regime, hour_index))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(12,14.5)) +
theme_bw() +
ggtitle("Events change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
#### Try to repeat procedure using FSC to see if there are big differences in growth rate changes? FSC should b inversely proportional to growth rates? when they divide, FSC should ~ half
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum.Median.FSC.A_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_FSC_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
}
# Derivatives of events/ul graph to determine instantaneous growth rates!!
# Trying out npregfast package to get nonparametric derivative estimations
# # Test flask use E
# d_ss_mean <- d_ss_mean %>% transform(hour_index = as.numeric(hour_index))
#
# FLASK <- filter(d_ss_mean, flask == "E")
# FLASK2 <- filter(d_ss_mean, flask == "F")
# # Plot of actual plus derivative!!!
# fit <- frfast(`Picochlorum.Events.μL.V._mean`~ hour_index, data = FLASK)
# fit2 <- frfast(`Picochlorum.Events.μL.V._mean`~ hour_index, data = FLASK2)
# autoplot(fit) + theme_bw()
# autoplot(fit, der = 1) + theme_bw()
# autoplot(fit2, der = 1) + theme_bw()
#
#
# # For plotting two derivatives in the same graphic window
#   ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
#                    theme_bw()+
#                    scale_x_continuous(breaks=seq(0,30,1)))
# gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
#
# what <- data.frame(cbind(der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]])))
# Now make it into a loop and generate a plot for each
crit_pts <- data.frame()
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum Events/μL(V)_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
# Creation of dataframe containing critical point info
crit_pts <- rbind(crit_pts,data.frame(cbind(flask = c(letter,letter,letter),der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]]))))
}
# While critical does a good job in identifying the hour_index at the point of inflection for some of the plots, very often it is looking at the wrong maximum of the covariate of x for the estimate, or the wrong maximum for the 1st der, or the  wrong intersection with 0 for the 2nd der. In the cases that it is totally off, we will just get the results manually through looking at the graph:
events_change <- data.frame(flask = c("E","F","G","J","K","L" ),
hour_index = c(12.5645645645646,
12.8,
13.2,
13.7,
14,
13.2632632632633),
light_regime = c("1608","1608","1212","0816","0816","1212"))
dev.new()
png(file.path("../report/img",paste("Max_Events", "Change", ".png", sep="_")), width = 1200, height = 600)
ggplot(events_change, aes(light_regime, hour_index))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(12,14.5)) +
theme_bw() +
ggtitle("Events change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
#### Try to repeat procedure using FSC to see if there are big differences in growth rate changes? FSC should b inversely proportional to growth rates? when they divide, FSC should ~ half
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum Median FSC-A_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_FSC_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
}
FSC_change <- data.frame(flask = c("E","F","G","J","K","L" ),
hour_index = c(11.8,
12.6,
12.7,
11.8,
12.4,
12.6),
light_regime = c("1608","1608","1212","0816","0816","1212"))
dev.new()
png(file.path("../report/img",paste("Max_FSC", "Change", ".png", sep="_")), width = 1200, height = 600)
ggplot(FSC_change, aes(light_regime, hour_index))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(11,13.5)) +
theme_bw() +
ggtitle("FSC change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
#### SSC!!!!!
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum Median SSC-A_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_SSC_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
}
SSC_change <- data.frame(flask = c("E","F","G","J","K","L" ),
hour_index = c(11.8,
12.7,
12.8,
12,
12.45,
13.2),
light_regime = c("1608","1608","1212","0816","0816","1212"))
dev.new()
png(file.path("../report/img",paste("Max_SSC", "Change", ".png", sep="_")), width = 1200, height = 600)
ggplot(SSC_change, aes(light_regime, hour_index))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(11,13.5)) +
theme_bw() +
ggtitle("SSC change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
#### PC5.5!!!
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum Median PC5.5-A_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_PC5.5_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
}
PC5.5_change <- data.frame(flask = c("E","F","G","J","K","L" ),
hour_index = c(11.8,
12.6,
12.5,
10.5,
12.2,
11.6),
light_regime = c("1608","1608","1212","0816","0816","1212"))
dev.new()
png(file.path("../report/img",paste("Max_PC5.5", "Change", ".png", sep="_")), width = 1200, height = 600)
ggplot(PC5.5_change, aes(light_regime, hour_index))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(9.5,13.5)) +
theme_bw() +
ggtitle("PC5.5 change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
# This is to clear the device list (dev.list())
graphics.off()
#### EXAMPLE DATASET #####
data(barnacle)
# Nonparametric regression without interactions
fit <- frfast(DW ~ RC, data = barnacle, nboot = 50)
autoplot(fit)
autoplot(fit, points = FALSE) + ggtitle("Title")
autoplot(fit, der = 1) + xlim(4, 20)
autoplot(fit, der = 1, col = "red", CIcol = "blue")
# Nonparametric regression with interactions
fit2 <- frfast(DW ~ RC : F, data = barnacle, nboot = 50)
autoplot(fit2, fac = "barca")
autoplot(fit2, der = 1, fac = "lens")
# Visualization of the differences between two factor's levels
autoplot(fit2, fac = "barca", diffwith = "lens")
autoplot(fit2, der = 1, fac = "barca", diffwith = "lens")
#Plotting in the same graphics device
## Not run:
if (requireNamespace("gridExtra", quietly = TRUE)) {
# For plotting two derivatives in the same graphic windows
ders <- lapply(0:1, function(x) autoplot(fit, der = x))
gridExtra::grid.arrange(grobs = ders, ncol = 2, nrow = 1)
# For plotting two levels in the same graphic windows
facs <- lapply(c("barca", "lens"), function(x) autoplot(fit2, der = 0, fac = x))
gridExtra::grid.arrange(grobs = facs, ncol = 2, nrow = 1)
}
## End(Not run)
# Example of prediction
# Nonparametric regression without interactions
fit <- frfast(DW ~ RC, data = barnacle, nboot = 100)
nd <- data.frame(RC = c(10, 14, 18))
predict(fit, newdata = nd)
# Example of finding critical points in the 1st and 2nd derivative curves
fit <- frfast(DW ~ RC, data = barnacle) # without interactions
critical(fit)
critical(fit, der = 0)
critical(fit, der = 1)
critical(fit, der = 2)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3) + ggtitle(paste("Flask", letter))
crit_pts <- data.frame()
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum Events/μL(V)_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3) + ggtitle(paste("Flask", letter))
dev.off()
# Creation of dataframe containing critical point info
crit_pts <- rbind(crit_pts,data.frame(cbind(flask = c(letter,letter,letter),der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]]))))
}
crit_pts <- data.frame()
for (letter in unique(d_ss_mean$flask)) {
FLASK<- filter(d_ss_mean,flask == letter)
fit <- frfast(`Picochlorum Events/μL(V)_mean`~ hour_index, data = FLASK)
ders <- lapply(0:2, function(x) autoplot(fit, der = x,col = "red", pcol = "black", lwd = 0.5)+
theme_bw()+
ggtitle(paste("Flask", letter)) +
scale_x_continuous(breaks=seq(0,28,1)))
# Create and store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 800)
gridExtra::grid.arrange(grobs = ders, ncol = 1, nrow = 3)
dev.off()
# Creation of dataframe containing critical point info
crit_pts <- rbind(crit_pts,data.frame(cbind(flask = c(letter,letter,letter),der = c("Estimation","First_der", "Second_der"), rbind(critical(fit)[[1]], critical(fit)[[2]], critical(fit)[[3]]))))
}
