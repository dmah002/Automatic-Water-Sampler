# Plot for Events
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title="Optimal Sampling Window") +
labs(color='Immediate Storage at -80°C') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("T999", "T888"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=14, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.title =element_text(size=14,face="bold"),
legend.text = element_text(size=14))
events <- events + facet_wrap(~start_cells)
events
png("../report/img/daily_growth.png", width = 800, height = 600)
print(events)
dev.off()
# Plot for Events
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title="Optimal Sampling Window") +
labs(color='Storage Procedure') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("Flash Frozen in Liquid N", "Immediate Storage at -80°C"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=14, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.title =element_text(size=14,face="bold"),
legend.text = element_text(size=14))
events <- events + facet_wrap(~start_cells)
events
png("../report/img/daily_growth.png", width = 800, height = 600)
print(events)
dev.off()
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title=expression(paste("Optimal Sampling Window of Strain SMS40 (", italic("Picochlorum sp."), ")"))) +
labs(color='Storage Procedure') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("Flash Frozen in Liquid N", "Immediate Storage at -80°C"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=14, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.title =element_text(size=14,face="bold"),
legend.text = element_text(size=14))
events <- events + facet_wrap(~start_cells)
events
png("../report/img/daily_growth.png", width = 800, height = 600)
print(events)
dev.off()
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = expression(paste("Starting Conc of", italic(10^3))),
"10000" = "condition: 6")))
print(events)
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = expression(paste("Starting Conc of", italic(10^3))),
"10000" = "condition: 6")))
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title=expression(paste("Optimal Sampling Window of Strain SMS40 (", italic("Picochlorum sp."), ")"))) +
labs(color='Storage Procedure') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("Flash Frozen in Liquid N", "Immediate Storage at -80°C"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=14, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.title =element_text(size=14,face="bold"),
legend.text = element_text(size=14))
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = expression(paste("Starting Conc of", italic(10^3))),
"10000" = "condition: 6")))
events
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = "condddd",
"10000" = "condition: 6")))
events
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = "10^3",
"10000" = "condition: 6")))
events
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = bquote(bold("day"^-1)),
"10000" = "condition: 6")))
events
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = bquote(bold("day"^-1)),
"10000" = "condition: 6")))
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title=expression(paste("Optimal Sampling Window of Strain SMS40 (", italic("Picochlorum sp."), ")"))) +
labs(color='Storage Procedure') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("Flash Frozen in Liquid N", "Immediate Storage at -80°C"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=14, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.title =element_text(size=14,face="bold"),
legend.text = element_text(size=14))
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = bquote(bold("day"^-1)),
"10000" = "condition: 6")))
events
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = "bquote(bold("day"^-1))",
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = "bquote(bold(day^-1))",
"10000" = "condition: 6")))
events
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = bquote(bold(day^-1)),
"10000" = "condition: 6")))
events
events <- events + facet_wrap(~start_cells, labeller = labeller(start_cells =
c("1000" = "Starting Conc of 10^3 cells/ml",
"10000" = "Starting Conc of 10^4 cells/ml")))
events
png("../report/img/daily_growth.png", width = 800, height = 600)
print(events)
dev.off()
png("../report/img/daily_growth.png", width = 1000, height = 600)
print(events)
dev.off()
events <- events +
facet_wrap(~start_cells, labeller = labeller(start_cells = c("1000" = "Starting Conc of 10^3 cells/ml",
"10000" = "Starting Conc of 10^4 cells/ml"))) +
theme(strip.text.x = element_text(size = 30))
events
events <- ggplot(data_pico_mean, aes(x = data_pico_mean$sample_datetime, y = data_pico_mean$Weighted.Picochlorum.Events.μL.V._mean))+
geom_smooth() +
geom_point(aes(col=FF)) +
labs(title=expression(paste("Optimal Sampling Window of Strain SMS40 (", italic("Picochlorum sp."), ")"))) +
labs(color='Storage Procedure') +
xlab("") +
ylab("Cells/μL") +
scale_y_continuous(trans = "log10") +
scale_color_manual(labels = c("Flash Frozen in Liquid N", "Immediate Storage at -80°C"), values = c(gg_color_hue(2)[1], gg_color_hue(2)[2])) +
theme_bw()+
scale_x_datetime(breaks = date_breaks("days"), labels = date_format("%b %d"))+
theme(title = element_text(size=16, face="bold"),
axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=1),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=14))
events <- events +
facet_wrap(~start_cells, labeller = labeller(start_cells = c("1000" = "Starting Conc of 10^3 cells/ml",
"10000" = "Starting Conc of 10^4 cells/ml"))) +
theme(strip.text.x = element_text(size = 16))
events
png("../report/img/daily_growth.png", width = 1000, height = 600)
print(events)
dev.off()
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
tidy = FALSE,
fig.height=8,
fig.width=8,
results = 'asis')
opts_knit$set(width=75)
library("ggplot2")
library("dplyr")
library("plotrix" ) # needed for standard error
library("readxl") # Read excel file
library("readr")
library("lubridate")
library("tidyr")
library("pspline")
library("npregfast")
library("ggpmisc")
library(mgcv)
library(scales)
library(grid)
library(stargazer)
# This is to clear the device list (dev.list())
graphics.off()
# Create function to get plot limits of a ggplot (for creation of grey box)
get_plot_limits <- function(plot) {
gb = ggplot_build(plot)
xmin = gb$layout$panel_params[[1]]$x.range[1]
xmax = gb$layout$panel_params[[1]]$x.range[2]
ymin = gb$layout$panel_params[[1]]$y.range[1]
ymax = gb$layout$panel_params[[1]]$y.range[2]
list(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)
}
# Create function to emulate ggplot colour scheme:
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
# Create a function for the transformation of the y-axis for the derivative. This is to label the growth rate in d^-1.
hr2day <- function (x) { scales::label_number(accuracy = 0.001,
scale = 1/24,
big.mark = ",")(x)
}
# Read the metadata
flaskdata <- read_csv("../data/metadata/flaskdata.csv")
# Add time elapsed since culture start
flaskdata <- flaskdata %>%
dplyr::mutate(julian_culture_st= make_datetime(flaskdata$`culture year`,flaskdata$`culture month`,flaskdata$`culture day`,flaskdata$`culture hour`,flaskdata$`culture min`)) %>%
dplyr::mutate(julian_sample_st= make_datetime(flaskdata$`sample year`,flaskdata$`sample month`,flaskdata$`sample day`,flaskdata$`sample hour`,flaskdata$`sample min`))%>%
dplyr::mutate(days_elapsed = julian_sample_st-julian_culture_st) %>%
dplyr::mutate(FA = paste(flask,attempt, sep = "")) %>%
dplyr::mutate(light_on = format(make_datetime(hour = flaskdata$`light hour`, min = flaskdata$`light min`), format = "%H:%M:%S")) %>%
dplyr::mutate(dark_on = format(make_datetime(hour = flaskdata$`dark hour`, min = flaskdata$`dark min`), format = "%H:%M:%S")) %>%
dplyr::mutate(light_on_datetime_1 = make_datetime(flaskdata$`sample year`,flaskdata$`sample month`,flaskdata$`sample day`,flaskdata$`light hour`, flaskdata$`light min`)) %>%
dplyr::mutate(dark_on_datetime_1 = make_datetime(flaskdata$`sample year`,flaskdata$`sample month`,flaskdata$`sample day`,flaskdata$`dark hour`, flaskdata$`dark min`)) %>%
dplyr::mutate(light_on_datetime_2 = make_datetime(flaskdata$`sample year`,flaskdata$`sample month`,flaskdata$`sample day`+1,flaskdata$`light hour`, flaskdata$`light min`)) %>%
dplyr::mutate(dark_on_datetime_2 = make_datetime(flaskdata$`sample year`,flaskdata$`sample month`,flaskdata$`sample day`+1,flaskdata$`dark hour`, flaskdata$`dark min`)) %>%
dplyr::mutate(datetime_1_tube_change= make_datetime(flaskdata$`1 tube change year`,flaskdata$`1 tube change month`,flaskdata$`1 tube change day`,flaskdata$`1 tube change hour`,flaskdata$`1 tube change min`))  %>%
dplyr::mutate(datetime_2_tube_change= make_datetime(flaskdata$`2 tube change year`,flaskdata$`2 tube change month`,flaskdata$`2 tube change day`,flaskdata$`2 tube change hour`,flaskdata$`2 tube change min`))  %>%
dplyr::mutate(datetime_3_tube_change= make_datetime(flaskdata$`3 tube change year`,flaskdata$`3 tube change month`,flaskdata$`3 tube change day`,flaskdata$`3 tube change hour`,flaskdata$`3 tube change min`))  %>%
dplyr::mutate(datetime_4_tube_change= make_datetime(flaskdata$`4 tube change year`,flaskdata$`4 tube change month`,flaskdata$`4 tube change day`,flaskdata$`4 tube change hour`,flaskdata$`4 tube change min`))
flaskdata <- flaskdata %>%
mutate(dark1_since_light1 = time_length(flaskdata$dark_on_datetime_1 - flaskdata$light_on_datetime_1, unit="hour")) %>%
mutate(light2_since_light1 = time_length(flaskdata$light_on_datetime_2 - flaskdata$light_on_datetime_1, unit="hour"))
## Read the data
# Find all csv files
myfiles = list.files(path="../data", pattern="*.csv", full.names=TRUE)
# Read all csv files
data_all <- lapply(myfiles, read_csv, skip =2)
data <- do.call(rbind, data_all)
# Split the tube names
data <- data %>%
dplyr::mutate(flask =  substr(`Tube Name:`, 1,1),
attempt = substr(`Tube Name:`, 2,2),
hour_index = substr(`Tube Name:`, 3,4),
AorM = substr(`Tube Name:`, 5,5),
repli = substr(`Tube Name:`, 6,6)
) %>%
dplyr::mutate(FA = paste(flask,attempt, sep = ""),
FAhi = paste(flask, attempt,hour_index, sep = ""))
## Compare both dataframes to get julian start time and light regime
julian_time <- data.frame()
light_regime <- data.frame()
for (row in 1:nrow(data)){
index <- match(data[row,"FA"],flaskdata$FA)
julian_time <- rbind(julian_time,as.numeric(flaskdata[index,"days_elapsed"])+as.numeric(data[row,"hour_index"])/24)
light_regime <- rbind(light_regime, flaskdata[index,"light regime"])
}
names(julian_time)[1] <- "julian_time"
data<- cbind(data, julian_time)
names(light_regime)[1] <- "light_regime"
data<- cbind(data, light_regime)
# Add time sampled
data <- data %>%
dplyr::mutate(julian_time_diff = as.difftime(data$julian_time, format = "%d", units = "days"))
sample_datetime <- data.frame()
for (row in 1:nrow(data)){
index <- match(data[row,"FA"],flaskdata$FA)
sample_datetime <- rbind(sample_datetime, flaskdata[index,"julian_culture_st"]+data.frame(data[row,"julian_time_diff"]))
}
names(sample_datetime)[1] <- "sample_datetime"
data<- cbind(data, sample_datetime)
# Extract just time from sample
data <- data %>%
dplyr::mutate(sample_time = format(sample_datetime, format = "%H:%M:%S"))
# data$sample_time <- strptime(data$sample_time,format="%H:%M")
# Loop through data to add hour since light on and "Light" or "Dark" as a another variable in the last column
lightORdark <- data.frame()
LorD<- ""
hr_since_light <- data.frame()
hr_since_light_var <- ""
# Check if it is light or dark
for (row in 1:nrow(data)){
index <- match(data[row,"FA"],flaskdata$FA)
hr_since_light_var <- time_length(data[row,"sample_datetime"]- flaskdata[[index,"light_on_datetime_1"]], unit="hour")
hr_since_light <- rbind(hr_since_light, data.frame(hr_since_light_var))
# A, B, E, F have dark cycles ending after midnight. The rest of the samples cycles should end before midnight.
if(data[row,"flask"] == "A" | data[row,"flask"] == "B" |data[row,"flask"] == "E"|data[row,"flask"] == "F"){
ifelse(data[row,"sample_time"] >= flaskdata[index,"dark_on"] & data[row,"sample_time"] <= flaskdata[index,"light_on"], LorD <- "dark", LorD <- "light")
}
else {
ifelse(data[row,"sample_time"] >= flaskdata[index,"light_on"] & data[row,"sample_time"] <= flaskdata[index,"dark_on"], LorD <- "light", LorD <- "dark")
}
lightORdark <- rbind(lightORdark, data.frame(LorD))
}
names(hr_since_light)[1] <- "hr_since_light"
names(lightORdark)[1] <- "lightORdark"
data<- cbind(data, hr_since_light, lightORdark)
# Loop through data and compare sampling times with the tube change data to determine how long it has been sitting in the sampler for
time_since_tube_change <- data.frame()
time_tube_change <- ""
# data<- filter(data,flask == "E")
for (row in 1:nrow(data)) {
index <- match(data[row,"FA"],flaskdata$FA)
if(data[row,"AorM"] == "A"){
if (is.na(flaskdata[index,"datetime_1_tube_change"]) == "TRUE"){time_tube_change <- 0}
else if (as.numeric(data[row,"sample_datetime"]) < as.numeric(flaskdata[index,"datetime_1_tube_change"])){
time_tube_change <- as.numeric(flaskdata[index,"datetime_1_tube_change"]) - as.numeric(data[row,"sample_datetime"])
}
else if (is.na(flaskdata[index,"datetime_2_tube_change"]) == "TRUE"){time_tube_change <- 0}
else if (as.numeric(data[row,"sample_datetime"]) >= as.numeric(flaskdata[index,"datetime_1_tube_change"]) & as.numeric(data[row,"sample_datetime"]) < as.numeric(flaskdata[index,"datetime_2_tube_change"])){
time_tube_change <- as.numeric(flaskdata[index,"datetime_2_tube_change"]) - as.numeric(data[row,"sample_datetime"])
}
else if (is.na(flaskdata[index,"datetime_3_tube_change"]) == "TRUE"){time_tube_change <- 0}
else if (as.numeric(data[row,"sample_datetime"]) >= as.numeric(flaskdata[index,"datetime_2_tube_change"]) & as.numeric(data[row,"sample_datetime"]) < as.numeric(flaskdata[index,"datetime_3_tube_change"])){
time_tube_change <- as.numeric(flaskdata[index,"datetime_3_tube_change"]) - as.numeric(data[row,"sample_datetime"])
}
else if (is.na(flaskdata[index,"datetime_4_tube_change"]) == "TRUE"){time_tube_change <- 0}
else if (as.numeric(data[row,"sample_datetime"]) >= as.numeric(flaskdata[index,"datetime_2_tube_change"]) & as.numeric(data[row,"sample_datetime"]) < as.numeric(flaskdata[index,"datetime_3_tube_change"])){
time_tube_change <- as.numeric(flaskdata[index,"datetime_4_tube_change"]) - as.numeric(data[row,"sample_datetime"])
}
else {
time_tube_change <- 0
}
}
else {time_tube_change <- 0}
# divide by 3600 because POSIXct as.numeric is in seconds. So final is hours since tube change.
time_since_tube_change <- rbind(time_since_tube_change, time_tube_change/3600)
}
names(time_since_tube_change)[1] <- "time_since_tube_change"
data<- cbind(data, time_since_tube_change)
## An Explanation of variables:
# Geom. Mean—The geometric mean. Can be a more applicable metric for a log-normal distribution. It is always less than or equal to the arithmetic mean.
# Robust Standard Deviation—68.26% of the events around the Median are used for this calculation, and an upper and lower range set.  The robust standard deviation is equal to (upper range + lower range) /2.  If the upper range is off scale, the robust standard deviation is equal to the lower range, and vice versa when the lower range is off scale and the robust standard deviation is the upper range.  The robust standard deviation is not as skewed by outlying values as the Standard Deviation.
# Robust CV—Equals 100 * 1/2( Intensity[at 84.13 percentile] – Intensity [at 15.87 percentile] ) / Median. The robust CV is not as skewed by outlying values as the CV.
# Extract the more useful data
d_ss <- data %>%
select(`flask`,attempt, hour_index, hr_since_light, FAhi, AorM, repli,light_regime,julian_time,sample_datetime, sample_time,lightORdark,time_since_tube_change,`Picochlorum Events/μL(V)`, `Picochlorum Median FSC-A`, `Picochlorum Median SSC-A`, `Picochlorum Median PC5.5-A`)
# Gets the mean of replicates
d_ss_mean <- d_ss %>%
group_by(flask, attempt,hour_index, hr_since_light, FAhi, AorM,light_regime, julian_time,sample_datetime, sample_time, lightORdark, time_since_tube_change) %>%
summarise_at(.vars = names(.)[14:17],
.funs = c(mean="mean"))
# Read the Temperature Data
myfiles = list.files(path="../data/metadata/GEEK temp sensor1615178083103_export", pattern="*.csv", full.names=TRUE)
data_all <- lapply(myfiles, read_csv)
tempdata <- do.call(rbind, data_all)
colnames(tempdata) <- c("datetime", "Temperature", "Humidity")
temp <- ggplot(tempdata, aes(x = datetime, y = Temperature)) +
geom_line() +
geom_smooth() +
xlab("Date") +
ylab("Temperature (°C)") +
scale_x_datetime(breaks = date_breaks("weeks"), labels = date_format("%b %d")) +
theme(title = element_text(size=16, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
print(temp)
png(file.path("../report/img","Temp.png"), width = 1200, height = 600)
print(temp)
dev.off()
temp <- ggplot(tempdata, aes(x = datetime, y = Temperature)) +
geom_line() +
geom_smooth() +
xlab("Date") +
ylab("Temperature (°C)") +
scale_x_datetime(breaks = date_breaks("weeks"), labels = date_format("%b %d")) +
theme(title = element_text(size=16, face="bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
png(file.path("../report/img","Temp.png"), width = 1200, height = 600)
print(temp)
dev.off()
gg_color_hue(3)[3]
gg_color_hue(3)[2]
gg_color_hue(3)[1]
# Comparing A and M samples
# Keep only rows of FAhi where both A and M exist
d_ss_mean_AM <- subset(d_ss_mean, FAhi %in% d_ss_mean[duplicated(d_ss_mean$FAhi),"FAhi"]$FAhi)
# Compare differences in
d_ss_mean_AM_A <- filter(d_ss_mean_AM,AorM == "A")
d_ss_mean_AM_M <- filter(d_ss_mean_AM,AorM == "M")
d_ss_mean_AM_A_ratio <-data.frame(c(d_ss_mean_AM_A[12],d_ss_mean_AM_A[-c(1:12)]/d_ss_mean_AM_M[-c(1:12)]))%>%
rename("Cells/μL" = Picochlorum.Events.μL.V._mean,
"FSC" = Picochlorum.Median.FSC.A_mean,
"SSC" = Picochlorum.Median.SSC.A_mean,
"PC5.5" = Picochlorum.Median.PC5.5.A_mean)
d_ss_mean_AM_A_ratio <- d_ss_mean_AM_A_ratio %>% gather(parameter, ratio, -time_since_tube_change)
preservation_plot <- ggplot(d_ss_mean_AM_A_ratio, aes(x = time_since_tube_change, y = ratio))+
geom_point() +
geom_hline(yintercept=1, linetype="dashed", color = "red")+
xlab("Time Since Tube Change") +
ylab("Ratio of Samples Kept at 4°C Prior to -80°C Storage \n against Samples Immediately Stored at -80°C") +
theme_bw() +
theme(title = element_text(size=16, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
preservation_plot <-  preservation_plot + facet_wrap(~parameter)
theme(strip.text.x = element_text(size = 16))
png(file.path("../report/img","preservation_plot.png"), width = 800, height = 600)
print(preservation_plot)
dev.off()
# Comparing A and M samples
# Keep only rows of FAhi where both A and M exist
d_ss_mean_AM <- subset(d_ss_mean, FAhi %in% d_ss_mean[duplicated(d_ss_mean$FAhi),"FAhi"]$FAhi)
# Compare differences in
d_ss_mean_AM_A <- filter(d_ss_mean_AM,AorM == "A")
d_ss_mean_AM_M <- filter(d_ss_mean_AM,AorM == "M")
d_ss_mean_AM_A_ratio <-data.frame(c(d_ss_mean_AM_A[12],d_ss_mean_AM_A[-c(1:12)]/d_ss_mean_AM_M[-c(1:12)]))%>%
rename("Cells/μL" = Picochlorum.Events.μL.V._mean,
"FSC" = Picochlorum.Median.FSC.A_mean,
"SSC" = Picochlorum.Median.SSC.A_mean,
"PC5.5" = Picochlorum.Median.PC5.5.A_mean)
d_ss_mean_AM_A_ratio <- d_ss_mean_AM_A_ratio %>% gather(parameter, ratio, -time_since_tube_change)
preservation_plot <- ggplot(d_ss_mean_AM_A_ratio, aes(x = time_since_tube_change, y = ratio))+
geom_point() +
geom_hline(yintercept=1, linetype="dashed", color = "red")+
xlab("Time Since Tube Change") +
ylab("Ratio of Samples Kept at 4°C Prior to -80°C Storage \n against Samples Immediately Stored at -80°C") +
theme_bw() +
theme(title = element_text(size=16, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
preservation_plot <-  preservation_plot + facet_wrap(~parameter)
theme(strip.text.x = element_text(size = 16))
png(file.path("../report/img","preservation_plot.png"), width = 800, height = 600)
print(preservation_plot)
dev.off()
# Comparing A and M samples
# Keep only rows of FAhi where both A and M exist
d_ss_mean_AM <- subset(d_ss_mean, FAhi %in% d_ss_mean[duplicated(d_ss_mean$FAhi),"FAhi"]$FAhi)
# Compare differences in
d_ss_mean_AM_A <- filter(d_ss_mean_AM,AorM == "A")
d_ss_mean_AM_M <- filter(d_ss_mean_AM,AorM == "M")
d_ss_mean_AM_A_ratio <-data.frame(c(d_ss_mean_AM_A[12],d_ss_mean_AM_A[-c(1:12)]/d_ss_mean_AM_M[-c(1:12)]))%>%
rename("Cells/μL" = Picochlorum.Events.μL.V._mean,
"FSC" = Picochlorum.Median.FSC.A_mean,
"SSC" = Picochlorum.Median.SSC.A_mean,
"PC5.5" = Picochlorum.Median.PC5.5.A_mean)
d_ss_mean_AM_A_ratio <- d_ss_mean_AM_A_ratio %>% gather(parameter, ratio, -time_since_tube_change)
preservation_plot <- ggplot(d_ss_mean_AM_A_ratio, aes(x = time_since_tube_change, y = ratio))+
geom_point() +
geom_hline(yintercept=1, linetype="dashed", color = "red")+
xlab("Time Since Tube Change") +
ylab("Ratio of Samples Kept at 4°C Prior to -80°C Storage \n against Samples Immediately Stored at -80°C") +
theme_bw() +
theme(title = element_text(size=16, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
preservation_plot <-  preservation_plot + facet_wrap(~parameter)
theme(strip.text.x = element_text(size = 20))
png(file.path("../report/img","preservation_plot.png"), width = 800, height = 600)
print(preservation_plot)
dev.off()
# Comparing A and M samples
# Keep only rows of FAhi where both A and M exist
d_ss_mean_AM <- subset(d_ss_mean, FAhi %in% d_ss_mean[duplicated(d_ss_mean$FAhi),"FAhi"]$FAhi)
# Compare differences in
d_ss_mean_AM_A <- filter(d_ss_mean_AM,AorM == "A")
d_ss_mean_AM_M <- filter(d_ss_mean_AM,AorM == "M")
d_ss_mean_AM_A_ratio <-data.frame(c(d_ss_mean_AM_A[12],d_ss_mean_AM_A[-c(1:12)]/d_ss_mean_AM_M[-c(1:12)]))%>%
rename("Cells/μL" = Picochlorum.Events.μL.V._mean,
"FSC" = Picochlorum.Median.FSC.A_mean,
"SSC" = Picochlorum.Median.SSC.A_mean,
"PC5.5" = Picochlorum.Median.PC5.5.A_mean)
d_ss_mean_AM_A_ratio <- d_ss_mean_AM_A_ratio %>% gather(parameter, ratio, -time_since_tube_change)
preservation_plot <- ggplot(d_ss_mean_AM_A_ratio, aes(x = time_since_tube_change, y = ratio))+
geom_point() +
geom_hline(yintercept=1, linetype="dashed", color = "red")+
xlab("Time Since Tube Change") +
ylab("Ratio of Samples Kept at 4°C Prior to -80°C Storage \n against Samples Immediately Stored at -80°C") +
theme_bw() +
theme(title = element_text(size=16, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
preservation_plot <-  preservation_plot + facet_wrap(~parameter) +
theme(strip.text.x = element_text(size = 16))
png(file.path("../report/img","preservation_plot.png"), width = 800, height = 600)
print(preservation_plot)
dev.off()
