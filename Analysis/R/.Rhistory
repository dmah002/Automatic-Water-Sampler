# Change colour of lines for each light_regime
if (FLASK$light_regime[1] == "1608"){
use_col <- gg_color_hue(3)[3]
}else if (FLASK$light_regime[1] == "1212") {
use_col <- gg_color_hue(3)[2]
} else {
use_col <- gg_color_hue(3)[1]
}
# Store the derivative plot and add flask name
# Also add text indicating light regime
grob <- grobTree(textGrob(paste("Light Regime: ", FLASK$light_regime[1]), x=0,  y=0.95, hjust=0,
gp=gpar(col=use_col, fontsize=18)))
xmin<- 7
xmax<-17
if(filter(flaskdata, flask ==letter)$dark1_since_light1[1] <= xmin){
darkmin <- xmin
} else {darkmin<- filter(flaskdata, flask ==letter)$dark1_since_light1}
if(filter(flaskdata, flask ==letter)$light2_since_light1[1]>=xmax){
darkmax <- xmax
} else {darkmax <- filter(flaskdata, flask ==letter)$light2_since_light1}
all_der_plots[[letter]] <- der1_plot +
ggtitle(paste("Flask",letter, sep = " ")) +
annotation_custom(grob) +
scale_x_continuous(breaks = breaks_width(2, 0), limits = c(xmin,xmax)) +
annotate(geom = "rect",
xmin=darkmin,
xmax=darkmax,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black") +
geom_vline(xintercept = crit_pts[2,1], col = use_col, lwd = 2) +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
# create list for grobs in gridExtra
der1_plot <- der1_plot +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
est_plot <- est_plot + theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
p <- list(est_plot,der1_plot)
# Store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 600)
gridExtra::grid.arrange(grobs = p, ncol = 1, nrow = length(p))
dev.off()
}
}
# Create a plot of all derivatives stacked on top of each other (except A, H, and I)
# remove unnecessary plots from list
all_der_plots <- within(all_der_plots, rm(H, I))
# Reorder so that light regimes are in order
all_der_plots <- all_der_plots[c("B", "E", "F", "G", "L", "J", "K")]
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", "ALL", ".png", sep="_")), width = 800, height = 1600)
gridExtra::grid.arrange(grobs = all_der_plots , ncol = 1, nrow = length(all_der_plots))
dev.off()
# Make a scatter plot for the points
events_change <- crit_pts_all%>%
filter(der == "First_der") %>%
select(Critical, flask) %>%
mutate(light_regime = c("1608", "1608", "1608", "1212", "1212", "0816", "0816", "0816", "1212")) %>%
filter(flask %in% c("B", "E", "F", "G", "J", "K", "L"))
dev.new()
png(file.path("../report/img",paste("Max_Events", "Change", ".png", sep="_")), width = 1200, height = 300)
ggplot(events_change, aes(light_regime, Critical))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(range(events_change$Critical)[1]-1,range(events_change$Critical)[2]+1 )) +
theme_bw() +
ggtitle("Events change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
crit_pts_all <- mutate(crit_pts_all, parameter = rep("events", nrow(crit_pts_all)))
crit_pts_all_para <- rbind(crit_pts_all_para, crit_pts_all)
graphics.off()
crit_pts_all_para <- data.frame()
# Derivatives of events/ul graph to determine instantaneous growth rates!!
# Trying out npregfast package to get nonparametric derivative estimations
# For Events data
crit_pts_all <- data.frame()
all_der_plots <- list()
for (letter in unique(d_ss_mean$flask)) {
# remove A because it is the time is not continuous for 24h
if (letter == "A"){
} else {
# Mask out the first and last few points from the dataset
FLASK <- d_ss_mean %>%
filter(flask == letter) %>%
rename(events = `Picochlorum Events/Î¼L(V)_mean`)
# Use npregfast::frfast to get the fit data
fit <- frfast(events~ hr_since_light, data = FLASK, p=2,h0=0.16, rank1 =9, ranku= 17, kbin = 300)
# Extract Critical points data
crit_pts <-data.frame(matrix(unlist(critical(fit)), nrow=length(critical(fit)), byrow=TRUE)) %>%
mutate(der = c("Estimation","First_der","Second_der")) %>%
mutate(flask = rep(letter, 3)) %>%
rename(Critical = X1,
Lwr = X2,
Upr = X3)
# Store ALL crit pt data
crit_pts <- mutate(crit_pts, light_regime = rep(FLASK$light_regime[1],nrow(crit_pts)))
crit_pts_all <- rbind(crit_pts_all, crit_pts)
# Create plots
est_plot <- autoplot(fit) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_x_continuous(breaks = breaks_width(2, 0)) +
ggtitle(paste("Flask",letter, sep = " ")) +
labs(x = 'Hours Since Start')
plot_limits <-get_plot_limits(est_plot)
est_plot <- est_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
der1_plot <- autoplot(fit, der = 1) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_y_continuous(breaks = breaks_pretty(6),labels = hr2day) +
scale_x_continuous(breaks = breaks_width(2, 0)) +
labs(x = 'Hours Since Start', y = bquote(bold(.(colnames(FLASK)[13]) ~ d^-1)))
plot_limits <-get_plot_limits(der1_plot)
der1_plot <- der1_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
# Change colour of lines for each light_regime
if (FLASK$light_regime[1] == "1608"){
use_col <- gg_color_hue(3)[3]
}else if (FLASK$light_regime[1] == "1212") {
use_col <- gg_color_hue(3)[2]
} else {
use_col <- gg_color_hue(3)[1]
}
# Store the derivative plot and add flask name
# Also add text indicating light regime
grob <- grobTree(textGrob(paste("Light Regime: ", FLASK$light_regime[1]), x=0,  y=0.95, hjust=0,
gp=gpar(col=use_col, fontsize=18)))
xmin<- 7
xmax<-17
if(filter(flaskdata, flask ==letter)$dark1_since_light1[1] <= xmin){
darkmin <- xmin
} else {darkmin<- filter(flaskdata, flask ==letter)$dark1_since_light1}
if(filter(flaskdata, flask ==letter)$light2_since_light1[1]>=xmax){
darkmax <- xmax
} else {darkmax <- filter(flaskdata, flask ==letter)$light2_since_light1}
all_der_plots[[letter]] <- der1_plot +
ggtitle(paste("Flask",letter, sep = " ")) +
annotation_custom(grob) +
scale_x_continuous(breaks = breaks_width(2, 0), limits = c(xmin,xmax)) +
annotate(geom = "rect",
xmin=darkmin,
xmax=darkmax,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black") +
geom_vline(xintercept = crit_pts[2,1], col = use_col, lwd = 2) +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
# create list for grobs in gridExtra
der1_plot <- der1_plot +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
est_plot <- est_plot + theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
p <- list(est_plot,der1_plot)
# Store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 600)
gridExtra::grid.arrange(grobs = p, ncol = 1, nrow = length(p))
dev.off()
}
}
# Create a plot of all derivatives stacked on top of each other (except A, H, and I)
# remove unnecessary plots from list
all_der_plots <- within(all_der_plots, rm(H, I))
# Reorder so that light regimes are in order
all_der_plots <- all_der_plots[c("B", "E", "F", "G", "L", "J", "K")]
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", "ALL", ".png", sep="_")), width = 800, height = 1600)
gridExtra::grid.arrange(grobs = all_der_plots , ncol = 1, nrow = length(all_der_plots))
dev.off()
# Make a scatter plot for the points
events_change <- crit_pts_all%>%
filter(der == "First_der") %>%
select(Critical, flask) %>%
mutate(light_regime = c("1608", "1608", "1608", "1212", "1212", "0816", "0816", "0816", "1212")) %>%
filter(flask %in% c("B", "E", "F", "G", "J", "K", "L"))
dev.new()
png(file.path("../report/img",paste("Max_Events", "Change", ".png", sep="_")), width = 1200, height = 300)
ggplot(events_change, aes(light_regime, Critical))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(range(events_change$Critical)[1]-1,range(events_change$Critical)[2]+1 )) +
theme_bw() +
ggtitle("Events change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
crit_pts_all <- mutate(crit_pts_all, parameter = rep("events", nrow(crit_pts_all)))
crit_pts_all_para <- rbind(crit_pts_all_para, crit_pts_all)
graphics.off()
der1_plot <- der1_plot +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
est_plot <- est_plot + theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
p <- list(est_plot,der1_plot)
# Store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 600)
gridExtra::grid.arrange(grobs = p, ncol = 1, nrow = length(p))
dev.off()
crit_pts_all_para <- data.frame()
# Derivatives of events/ul graph to determine instantaneous growth rates!!
# Trying out npregfast package to get nonparametric derivative estimations
# For Events data
crit_pts_all <- data.frame()
all_der_plots <- list()
for (letter in unique(d_ss_mean$flask)) {
# remove A because it is the time is not continuous for 24h
if (letter == "A"){
} else {
# Mask out the first and last few points from the dataset
FLASK <- d_ss_mean %>%
filter(flask == letter, hr_since_light >=2 & hr_since_light <= 23) %>%
rename(events = `Picochlorum Events/Î¼L(V)_mean`)
# Use npregfast::frfast to get the fit data
fit <- frfast(events~ hr_since_light, data = FLASK, p=2,h0=0.16, rank1 =9, ranku= 17, kbin = 300)
# Extract Critical points data
crit_pts <-data.frame(matrix(unlist(critical(fit)), nrow=length(critical(fit)), byrow=TRUE)) %>%
mutate(der = c("Estimation","First_der","Second_der")) %>%
mutate(flask = rep(letter, 3)) %>%
rename(Critical = X1,
Lwr = X2,
Upr = X3)
# Store ALL crit pt data
crit_pts <- mutate(crit_pts, light_regime = rep(FLASK$light_regime[1],nrow(crit_pts)))
crit_pts_all <- rbind(crit_pts_all, crit_pts)
# Create plots
est_plot <- autoplot(fit) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_x_continuous(breaks = breaks_width(2, 0)) +
ggtitle(paste("Flask",letter, sep = " ")) +
labs(x = 'Hours Since Start')
plot_limits <-get_plot_limits(est_plot)
est_plot <- est_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
der1_plot <- autoplot(fit, der = 1) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_y_continuous(breaks = breaks_pretty(6),labels = hr2day) +
scale_x_continuous(breaks = breaks_width(2, 0)) +
labs(x = 'Hours Since Start', y = bquote(bold(.(colnames(FLASK)[13]) ~ d^-1)))
plot_limits <-get_plot_limits(der1_plot)
der1_plot <- der1_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
# Change colour of lines for each light_regime
if (FLASK$light_regime[1] == "1608"){
use_col <- gg_color_hue(3)[3]
}else if (FLASK$light_regime[1] == "1212") {
use_col <- gg_color_hue(3)[2]
} else {
use_col <- gg_color_hue(3)[1]
}
# Store the derivative plot and add flask name
# Also add text indicating light regime
grob <- grobTree(textGrob(paste("Light Regime: ", FLASK$light_regime[1]), x=0,  y=0.95, hjust=0,
gp=gpar(col=use_col, fontsize=18)))
xmin<- 7
xmax<-17
if(filter(flaskdata, flask ==letter)$dark1_since_light1[1] <= xmin){
darkmin <- xmin
} else {darkmin<- filter(flaskdata, flask ==letter)$dark1_since_light1}
if(filter(flaskdata, flask ==letter)$light2_since_light1[1]>=xmax){
darkmax <- xmax
} else {darkmax <- filter(flaskdata, flask ==letter)$light2_since_light1}
all_der_plots[[letter]] <- der1_plot +
ggtitle(paste("Flask",letter, sep = " ")) +
annotation_custom(grob) +
scale_x_continuous(breaks = breaks_width(2, 0), limits = c(xmin,xmax)) +
annotate(geom = "rect",
xmin=darkmin,
xmax=darkmax,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black") +
geom_vline(xintercept = crit_pts[2,1], col = use_col, lwd = 2) +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
# create list for grobs in gridExtra
der1_plot <- der1_plot +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
est_plot <- est_plot + theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
p <- list(est_plot,der1_plot)
# Store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 600)
gridExtra::grid.arrange(grobs = p, ncol = 1, nrow = length(p))
dev.off()
}
}
# Create a plot of all derivatives stacked on top of each other (except A, H, and I)
# remove unnecessary plots from list
all_der_plots <- within(all_der_plots, rm(H, I))
# Reorder so that light regimes are in order
all_der_plots <- all_der_plots[c("B", "E", "F", "G", "L", "J", "K")]
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", "ALL", ".png", sep="_")), width = 800, height = 1600)
gridExtra::grid.arrange(grobs = all_der_plots , ncol = 1, nrow = length(all_der_plots))
dev.off()
# Make a scatter plot for the points
events_change <- crit_pts_all%>%
filter(der == "First_der") %>%
select(Critical, flask) %>%
mutate(light_regime = c("1608", "1608", "1608", "1212", "1212", "0816", "0816", "0816", "1212")) %>%
filter(flask %in% c("B", "E", "F", "G", "J", "K", "L"))
dev.new()
png(file.path("../report/img",paste("Max_Events", "Change", ".png", sep="_")), width = 1200, height = 300)
ggplot(events_change, aes(light_regime, Critical))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(range(events_change$Critical)[1]-1,range(events_change$Critical)[2]+1 )) +
theme_bw() +
ggtitle("Events change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
crit_pts_all <- mutate(crit_pts_all, parameter = rep("events", nrow(crit_pts_all)))
crit_pts_all_para <- rbind(crit_pts_all_para, crit_pts_all)
graphics.off()
crit_pts_all_para <- data.frame()
# Derivatives of events/ul graph to determine instantaneous growth rates!!
# Trying out npregfast package to get nonparametric derivative estimations
# For Events data
crit_pts_all <- data.frame()
all_der_plots <- list()
for (letter in unique(d_ss_mean$flask)) {
# remove A because it is the time is not continuous for 24h
if (letter == "A"){
} else {
# Mask out the first and last few points from the dataset
FLASK <- d_ss_mean %>%
filter(flask == letter, hr_since_light >=2 & hr_since_light <= 23) %>%
rename(events = `Picochlorum Events/Î¼L(V)_mean`)
# Use npregfast::frfast to get the fit data
fit <- frfast(events~ hr_since_light, data = FLASK, p=2,h0=0.16, rank1 =9, ranku= 17, kbin = 300)
# Extract Critical points data
crit_pts <-data.frame(matrix(unlist(critical(fit)), nrow=length(critical(fit)), byrow=TRUE)) %>%
mutate(der = c("Estimation","First_der","Second_der")) %>%
mutate(flask = rep(letter, 3)) %>%
rename(Critical = X1,
Lwr = X2,
Upr = X3)
# Store ALL crit pt data
crit_pts <- mutate(crit_pts, light_regime = rep(FLASK$light_regime[1],nrow(crit_pts)))
crit_pts_all <- rbind(crit_pts_all, crit_pts)
# Create plots
est_plot <- autoplot(fit) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_x_continuous(breaks = breaks_width(2, 0)) +
ggtitle(paste("Flask",letter, sep = " ")) +
labs(x = 'Hours Since Start')
plot_limits <-get_plot_limits(est_plot)
est_plot <- est_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
der1_plot <- autoplot(fit, der = 1) +
geom_vline(xintercept = crit_pts[2,1], col = "red") +
scale_y_continuous(breaks = breaks_pretty(6),labels = hr2day) +
scale_x_continuous(breaks = breaks_width(2, 0)) +
labs(x = 'Hours Since Start', y = bquote(bold(.(colnames(FLASK)[13]) ~ d^-1)))
plot_limits <-get_plot_limits(der1_plot)
der1_plot <- der1_plot + annotate(geom = "rect",
xmin=filter(flaskdata, flask ==letter)$dark1_since_light1,
xmax=filter(flaskdata, flask ==letter)$light2_since_light1,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black")
# Change colour of lines for each light_regime
if (FLASK$light_regime[1] == "1608"){
use_col <- gg_color_hue(3)[3]
}else if (FLASK$light_regime[1] == "1212") {
use_col <- gg_color_hue(3)[2]
} else {
use_col <- gg_color_hue(3)[1]
}
# Store the derivative plot and add flask name
# Also add text indicating light regime
grob <- grobTree(textGrob(paste("Light Regime: ", FLASK$light_regime[1]), x=0,  y=0.95, hjust=0,
gp=gpar(col=use_col, fontsize=18)))
xmin<- 7
xmax<-17
if(filter(flaskdata, flask ==letter)$dark1_since_light1[1] <= xmin){
darkmin <- xmin
} else {darkmin<- filter(flaskdata, flask ==letter)$dark1_since_light1}
if(filter(flaskdata, flask ==letter)$light2_since_light1[1]>=xmax){
darkmax <- xmax
} else {darkmax <- filter(flaskdata, flask ==letter)$light2_since_light1}
all_der_plots[[letter]] <- der1_plot +
ggtitle(paste("Flask",letter, sep = " ")) +
annotation_custom(grob) +
scale_x_continuous(breaks = breaks_width(2, 0), limits = c(xmin,xmax)) +
annotate(geom = "rect",
xmin=darkmin,
xmax=darkmax,
ymin=plot_limits[[3]],
ymax=plot_limits[[4]], alpha= 0.3, fill = "black") +
geom_vline(xintercept = crit_pts[2,1], col = use_col, lwd = 2) +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
# create list for grobs in gridExtra
der1_plot <- der1_plot +
theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
est_plot <- est_plot + theme(title = element_text(size=18, face="bold"),
axis.text=element_text(size=18),
axis.title=element_text(size=18,face="bold"),
legend.title =element_text(size=18,face="bold"),
legend.text = element_text(size=18))
p <- list(est_plot,der1_plot)
# Store plots in img folder
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", letter, ".png", sep="_")), width = 800, height = 600)
gridExtra::grid.arrange(grobs = p, ncol = 1, nrow = length(p))
dev.off()
}
}
# Create a plot of all derivatives stacked on top of each other (except A, H, and I)
# remove unnecessary plots from list
all_der_plots <- within(all_der_plots, rm(H, I))
# Reorder so that light regimes are in order
all_der_plots <- all_der_plots[c("B", "E", "F", "G", "L", "J", "K")]
dev.new()
png(file.path("../report/img",paste("model_EVENTS_der", "ALL", ".png", sep="_")), width = 800, height = 1600)
gridExtra::grid.arrange(grobs = all_der_plots , ncol = 1, nrow = length(all_der_plots))
dev.off()
# Make a scatter plot for the points
events_change <- crit_pts_all%>%
filter(der == "First_der") %>%
select(Critical, flask) %>%
mutate(light_regime = c("1608", "1608", "1608", "1212", "1212", "0816", "0816", "0816", "1212")) %>%
filter(flask %in% c("B", "E", "F", "G", "J", "K", "L"))
dev.new()
png(file.path("../report/img",paste("Max_Events", "Change", ".png", sep="_")), width = 1200, height = 300)
ggplot(events_change, aes(light_regime, Critical))+
geom_point(aes(color = light_regime, size = 2)) +
coord_flip() +
geom_text(aes(label= flask),hjust=1.5, vjust=-1) +
scale_y_continuous(limits = c(range(events_change$Critical)[1]-1,range(events_change$Critical)[2]+1 )) +
theme_bw() +
ggtitle("Events change") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"),
legend.title =element_text(size=16,face="bold"),
legend.text = element_text(size=16))
dev.off()
crit_pts_all <- mutate(crit_pts_all, parameter = rep("events", nrow(crit_pts_all)))
crit_pts_all_para <- rbind(crit_pts_all_para, crit_pts_all)
graphics.off()
